(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var Http_1 = require('./Http');
var Page_1 = require('./Page');
var TestCase_1 = require('./TestCase');
var Router_1 = require('./Router');
var App = (function () {
    function App(config) {
        console.log('App starting ...');
        App.config = config;
        App.http = new Http_1.Http();
        this.router = new Router_1.Router();
        this.registerHandlebarsHelpers();
        this.router.addRoute('/', function () {
            Q.fcall(function () {
                var testCase = new TestCase_1.TestCase(TestCase_1.TestCase.createEmptyEntity());
                return new Page_1.Page(testCase);
            }).then(function (page) {
                page.render();
            });
        });
        this.router.addRoute('/test/{slug}', function (slug) {
            return App.http.getJSON(App.config.serverUri + "/test/" + slug + ".json").then(function (r) {
                var testCase = new TestCase_1.TestCase(r.getBody());
                return new Page_1.Page(testCase);
            }).then(function (page) {
                page.render();
            });
        });
        this.router.run().then(function (a) {
            console.log('Page rendered.');
        }, function (error) {
            Page_1.Page.renderErrorPopup(error.message);
            window.location.href = '/';
        });
    }
    App.prototype.registerHandlebarsHelpers = function () {
        Handlebars.registerHelper('if_eq', function (a, b, opts) {
            if (a === b) {
                return opts.fn(this);
            }
            else {
                return opts.inverse(this);
            }
        });
        Handlebars.registerHelper('if_gt', function (a, b, opts) {
            if (a > b) {
                return opts.fn(this);
            }
            else {
                return opts.inverse(this);
            }
        });
        Handlebars.registerHelper('timestamp', function () {
            return (new Date()).getTime();
        });
    };
    App.prototype.bindErrorLogging = function () {
        if (!('onerror' in window)) {
            return false;
        }
        var timeStamp = (new Date()).getTime();
        window.onerror = function (msg, url, lineNo, columnNo, error) {
            var diff = (new Date()).getTime() - timeStamp;
            var minutesDifference = Math.floor(diff / 1000 / 60);
            console.log('Minutes difference: ', minutesDifference);
            var errorDTO = {
                msg: msg,
                url: url || window.location.href,
                lineNo: lineNo,
                colNo: columnNo,
                trace: error.toString()
            };
            App.http.postJSON(App.config.serverUri + "/log.json", errorDTO).then(function () {
                timeStamp = (new Date()).getTime();
            });
        };
    };
    ;
    return App;
}());
exports.App = App;
},{"./Http":2,"./Page":3,"./Router":4,"./TestCase":6}],2:[function(require,module,exports){
"use strict";
var Http = (function () {
    function Http() {
    }
    Http.fromStringToJSON = function (str) {
        return str ? JSON.parse(str) : {};
    };
    Http.fromJSONToString = function (jsonObj) {
        return JSON.stringify(jsonObj);
    };
    Http.contentTypeIsJSON = function (header) {
        if (!header) {
            return false;
        }
        return !!header.match(/application\/json/i);
    };
    Http.prototype.sendRequest = function (request) {
        var deferred = Q.defer();
        var xhr = typeof XMLHttpRequest !== 'undefined' ? new XMLHttpRequest() : null;
        xhr.open(request.getMethod(), request.getUrl(), true);
        (function (headers) {
            for (var i in headers) {
                if (headers.hasOwnProperty(i)) {
                    xhr.setRequestHeader(i, headers[i]);
                }
            }
        })(request.getHeaders());
        var _response = this._response;
        xhr.onload = function () {
            if (xhr.readyState === Http.XHR_DONE) {
                _response = new Response(xhr.status, xhr.response);
                if (Http.contentTypeIsJSON(this.getResponseHeader('content-type'))) {
                    _response.setBody(Http.fromStringToJSON(_response.getBodyRaw()));
                }
                if (xhr.status === Http.HTTP_SUCCESS || xhr.status === Http.HTTP_CREATED) {
                    deferred.resolve(_response);
                }
                else {
                    deferred.reject(_response);
                }
            }
        };
        if (request.getBody()) {
            xhr.send(request.getBody());
        }
        else {
            xhr.send();
        }
        return deferred.promise;
    };
    Object.defineProperty(Http.prototype, "request", {
        get: function () {
            return this._request;
        },
        set: function (request) {
            this._request = request;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Http.prototype, "response", {
        get: function () {
            return this._response;
        },
        set: function (response) {
            this._response = response;
        },
        enumerable: true,
        configurable: true
    });
    Http.prototype.send = function (method, url, body) {
        return this.sendRequest(new Request(method, url, null, body));
    };
    Http.prototype.getJSON = function (url) {
        return this.sendRequest(new Request('GET', url, { 'Content-Type': 'application/json', 'Accept': 'application/json' }, null)).then(function (response) {
            return response;
        });
    };
    ;
    Http.prototype.postJSON = function (url, body) {
        var bodyString = Http.fromJSONToString(body);
        return this.sendRequest(new Request('POST', url, { 'Content-Type': 'application/json', 'Accept': 'application/json' }, bodyString)).then(function (response) {
            return response;
        });
    };
    ;
    Http.prototype.getHTML = function (url) {
        return this.sendRequest(new Request('GET', url, { 'Content-Type': 'text/html', 'Accept': 'text/html' }, null));
    };
    ;
    Http.HTTP_SUCCESS = 200;
    Http.HTTP_CREATED = 201;
    Http.HTTP_NOT_FOUND = 404;
    Http.HTTP_BAD_REQUEST = 400;
    Http.XHR_UNSENT = 0;
    Http.XHR_OPENED = 1;
    Http.XHR_HEADERS_RECEIVED = 2;
    Http.XHR_LOADING = 3;
    Http.XHR_DONE = 4;
    return Http;
}());
exports.Http = Http;
var Request = (function () {
    function Request(method, url, headers, body) {
        this.method = method;
        this.url = url;
        this.headers = headers || {};
        this.body = body;
    }
    ;
    Request.prototype.getMethod = function () {
        return this.method;
    };
    ;
    Request.prototype.getUrl = function () {
        return this.url;
    };
    ;
    Request.prototype.getHeaders = function () {
        return this.headers;
    };
    ;
    Request.prototype.getBody = function () {
        return this.body;
    };
    ;
    return Request;
}());
var Response = (function () {
    function Response(status, body) {
        this.status = status;
        this.body = body;
        this.bodyRaw = body;
    }
    ;
    Response.prototype.setStatus = function (status) {
        this.status = status;
    };
    ;
    Response.prototype.getStatus = function () {
        return this.status;
    };
    ;
    Response.prototype.setBody = function (body) {
        this.body = body;
    };
    ;
    Response.prototype.getBody = function () {
        return this.body;
    };
    ;
    Response.prototype.getBodyRaw = function () {
        return this.bodyRaw;
    };
    return Response;
}());
},{}],3:[function(require,module,exports){
"use strict";
var TestCase_1 = require('./TestCase');
var App_1 = require('./App');
var Runner_1 = require('./Runner');
var TotalChartPanel_1 = require('./TotalChartPanel');
var Page = (function () {
    function Page(testCase) {
        console.log('TestCase constructor ...');
        this.testCase = testCase;
    }
    Page.renderElem = function (id, html, data) {
        var $elem = document.getElementById(id);
        var template = Handlebars.compile(html);
        $elem.innerHTML = template(data);
    };
    Page.prototype.render = function () {
        var _this = this;
        Q.spread([
            App_1.App.http.getHTML(App_1.App.config.clientUri + '/tpl/testcase-entry-form.hbs'),
            App_1.App.http.getHTML(App_1.App.config.clientUri + '/tpl/testcase-main-form.hbs')
        ], function (tplEntryR, tplMainR) {
            Handlebars.registerPartial('entry', tplEntryR.getBody());
            Page.renderElem('testcase-main-form', tplMainR.getBody(), _this.testCase);
        }).then(function () {
            _this.bindSaveBtn();
            _this.bindAddTestEntryBtn();
            _this.bindRunBtn();
        });
    };
    Page.renderErrorPopup = function (error) {
        var msgTxt = 'Some kind of error occurred.';
        if (typeof error === 'object' && typeof error.error !== 'undefined' && error.error.message) {
            msgTxt = error.error.message;
        }
        else if (typeof error === 'string') {
            msgTxt = error;
        }
        window.alert(msgTxt);
    };
    Page.prototype.renderChartPanel = function () {
        var panel = new TotalChartPanel_1.TotalChartPanel(this, this.testCase);
        panel.getData().then(function (r) {
            panel.render(r.getBody());
        }, function (response) {
            Page.renderErrorPopup(response.getBody());
        });
    };
    ;
    Page.prototype.bindSaveBtn = function () {
        var $saveBtn = document.getElementById('save-testcase-button');
        $saveBtn.addEventListener('click', function (e) {
            e.preventDefault();
            Page.toggleRenderBtn('save-testcase-button', 'disable');
            var testCaseDTO = TestCase_1.TestCase.createEntityFromDOMElement('testcase-main-form');
            testCaseDTO.env = {
                browserName: platform.name,
                browserVersion: platform.version,
                os: platform.os
            };
            App_1.App.http.postJSON(App_1.App.config.serverUri + '/tests.json', testCaseDTO)
                .then(function () {
                Page.toggleRenderBtn('save-testcase-button', 'activate');
            }, function (response) {
                Page.toggleRenderBtn('save-testcase-button', 'activate');
                Page.renderErrorPopup(response.getBody());
            });
        });
    };
    Page.prototype.bindRunBtn = function () {
        var _page = this;
        var $runBtn = document.getElementById('run-testcase-button');
        $runBtn.addEventListener('click', function (e) {
            e.preventDefault();
            Page.toggleRenderBtn('run-testcase-button', 'disable');
            var testCaseDTO = TestCase_1.TestCase.createEntityFromDOMElement('testcase-main-form');
            testCaseDTO.env = {
                browserName: platform.name,
                browserVersion: platform.version,
                os: platform.os
            };
            App_1.App.http.getHTML(App_1.App.config.clientUri + "/tpl/testcase-results-table.hbs")
                .then(function (r) {
                Page.renderElem('results', r.getBody(), testCaseDTO);
                var runner = new Runner_1.Runner(new TestCase_1.TestCase(testCaseDTO));
                runner.run().then(function (results) {
                    Page.toggleRenderBtn('run-testcase-button', 'activate');
                    _page.sendResults(results).then(function () {
                        console.log('Rendering Chart Panel ...');
                        _page.renderChartPanel();
                    });
                }, function (error) {
                    Page.renderErrorPopup(error);
                });
            });
        }, false);
    };
    Page.prototype.bindAddTestEntryBtn = function () {
        var _this = this;
        var $btn = document.getElementById('add-test-link');
        $btn.addEventListener('click', function (e) {
            e.preventDefault();
            console.log('click?');
            App_1.App.http.getHTML(App_1.App.config.clientUri + "/tpl/testcase-entry-form.hbs").then(function (response) {
                var entryId = Page.getNextTestCaseEntryId();
                var newTestEntry = TestCase_1.TestCase.createEmptyTestCaseEntry(entryId);
                _this.testCase.addEntry(newTestEntry);
                var template = Handlebars.compile(response.getBody());
                var html = template(newTestEntry);
                var $newEntry = document.createElement('div');
                $newEntry.innerHTML = html;
                var $entries = document.getElementById('entries');
                $entries.appendChild($newEntry.firstChild);
                _this.bindRemoveTestEntryBtn(entryId);
            });
        });
    };
    ;
    Page.prototype.bindRemoveTestEntryBtn = function (entryId) {
        var _this = this;
        var $entries = document.getElementById('entries');
        var $entry = document.getElementById('testcase-test-' + entryId);
        var $button = $entry.getElementsByClassName('testcase-test-remove');
        $button[0].addEventListener('click', function (e) {
            console.log('click?');
            _this.testCase.removeEntry(entryId);
            $entries.removeChild($entry);
        });
    };
    ;
    Page.getNextTestCaseEntryId = function () {
        return document.getElementsByClassName('testcase-test').length + 1;
    };
    Page.toggleRenderBtn = function (id, status) {
        var $btn = document.getElementById(id);
        if (status === 'activate') {
            $btn.classList.remove('btn-loading');
            $btn.disabled = false;
        }
        else {
            $btn.className += ' btn-loading';
            $btn.disabled = true;
        }
    };
    Page.prototype.sendResults = function (results) {
        var testCaseDTO = TestCase_1.TestCase.createEntityFromDOMElement('testcase-main-form');
        for (var i in results) {
            if (!results.hasOwnProperty(i)) {
                continue;
            }
            testCaseDTO.entries[i].results = results[i];
        }
        testCaseDTO.env = {
            browserName: platform.name,
            browserVersion: platform.version,
            os: platform.os
        };
        console.log(testCaseDTO, JSON.stringify(testCaseDTO));
        this.testCase = TestCase_1.TestCase.create(testCaseDTO);
        return App_1.App.http.postJSON(App_1.App.config.serverUri + "/tests.json", testCaseDTO);
    };
    ;
    return Page;
}());
exports.Page = Page;
},{"./App":1,"./Runner":5,"./TestCase":6,"./TotalChartPanel":7}],4:[function(require,module,exports){
"use strict";
var Router = (function () {
    function Router() {
        this.routes = [];
    }
    Router.prototype.run = function (customPath) {
        var deferred = Q.defer();
        var path = customPath ? customPath : window.location.pathname;
        var route = this.matchRoute(path);
        if (route) {
            deferred.resolve(route.action.apply(null, route.args));
        }
        else {
            deferred.reject(new Error('No valid route found.'));
        }
        return deferred.promise;
    };
    Router.prototype.addRoute = function (path, action) {
        if (!path || !action) {
            return false;
        }
        this.routes.push({
            path: path,
            action: action
        });
    };
    Router.prototype.matchRoute = function (path) {
        var matchFound;
        var preparedPath;
        for (var i = 0; i < this.routes.length; i++) {
            preparedPath = "^" + Router.preparePath(this.routes[i].path) + "$";
            matchFound = path.match(new RegExp(preparedPath, 'i'));
            if (matchFound) {
                var args = matchFound.slice(1, matchFound.length);
                return {
                    path: this.routes[i].path,
                    action: this.routes[i].action,
                    args: args,
                    requestedPath: path
                };
            }
        }
    };
    Router.preparePath = function (path) {
        return path.replace(/{[a-z]+}/g, '([a-z0-9-]+)');
    };
    return Router;
}());
exports.Router = Router;
},{}],5:[function(require,module,exports){
"use strict";
var Runner = (function () {
    function Runner(testCase) {
        this.testCase = testCase;
    }
    Runner.prototype.run = function () {
        if (!this.testCase.isReadyToRun()) {
            throw new Error('You need to have at least two code entries in order to run the test case.');
        }
        console.log('Starting runner ...');
        return this.startBench();
    };
    Runner.prototype.startBench = function () {
        var deferredQ = Q.defer();
        var testCase = this.testCase;
        var benches = [];
        var bench;
        var results = {};
        for (var j in testCase.entries) {
            if (!testCase.entries.hasOwnProperty(j)) {
                continue;
            }
            bench = new Benchmark(testCase.entries[j].title, {
                id: j,
                async: true,
                setup: testCase.harness.setUp,
                teardown: testCase.harness.tearDown,
                fn: testCase.entries[j].code,
                onStart: function (e) {
                    var benchResult = e.target;
                    Runner.renderResult(benchResult.id, 'Starting ...');
                },
                onComplete: function (e) {
                    var benchResult = e.target;
                    results[benchResult.id] = {
                        id: benchResult.id,
                        error: benchResult.error ? Benchmark.join(benchResult.error) : null,
                        opsPerSec: benchResult.hz.toFixed(benchResult.hz < 100 ? 2 : 0),
                        opsPerSecFormatted: Benchmark.formatNumber(benchResult.hz.toFixed(benchResult.hz < 100 ? 2 : 0)),
                        pm: benchResult.stats.rme.toFixed(2),
                        runSamples: benchResult.stats.sample.length
                    };
                    Runner.renderResult(benchResult.id, results[benchResult.id].opsPerSecFormatted + ' (&plusmn;' + results[benchResult.id].pm + ')');
                }
            });
            benches.push(bench);
        }
        setTimeout(function () {
            Benchmark.invoke(benches, {
                name: 'run',
                args: true,
                onStart: function (e) {
                    console.log('Starting benchmarks ...', e);
                },
                onCycle: function (e) {
                    console.log('onCycle here.', e);
                },
                onError: function (e) {
                    console.log('onError here.', e);
                    deferredQ.reject(new Error('Running suite returned an error.'));
                },
                onComplete: function (e) {
                    console.log('onComplete here.', e, results);
                    Runner.renderWinnerResult(Benchmark.filter(benches, 'fastest')[0].id);
                    Runner.renderLoserResult(Benchmark.filter(benches, 'slowest')[0].id);
                    deferredQ.resolve(results);
                }
            });
        }, 2000);
        return deferredQ.promise;
    };
    Runner.renderResult = function (id, text) {
        var $elem = document.getElementById('testcase-test-result-text-' + id);
        $elem.innerHTML = text;
    };
    ;
    Runner.renderWinnerResult = function (id) {
        var $elem = document.getElementById('testcase-test-result-text-' + id);
        $elem.className += ' success';
    };
    ;
    Runner.renderLoserResult = function (id) {
        var $elem = document.getElementById('testcase-test-result-text-' + id);
        $elem.className += ' danger';
    };
    ;
    return Runner;
}());
exports.Runner = Runner;
},{}],6:[function(require,module,exports){
"use strict";
var Utils_1 = require('./Utils');
var TestCase = (function () {
    function TestCase(testCase) {
        this.title = testCase.title;
        this.slug = testCase.slug;
        this.description = testCase.description;
        this.status = testCase.status;
        this.harness = testCase.harness;
        this.entries = testCase.entries;
        this.env = testCase.env;
    }
    Object.defineProperty(TestCase.prototype, "title", {
        get: function () {
            return this._title;
        },
        set: function (title) {
            this._title = title;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestCase.prototype, "slug", {
        get: function () {
            return this._slug;
        },
        set: function (slug) {
            this._slug = slug;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestCase.prototype, "description", {
        get: function () {
            return this._description;
        },
        set: function (description) {
            this._description = description;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestCase.prototype, "status", {
        get: function () {
            return this._status;
        },
        set: function (status) {
            this._status = status;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestCase.prototype, "harness", {
        get: function () {
            return this._harness;
        },
        set: function (harness) {
            this._harness = harness;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestCase.prototype, "entries", {
        get: function () {
            return this._entries;
        },
        set: function (entries) {
            this._entries = entries;
        },
        enumerable: true,
        configurable: true
    });
    TestCase.prototype.addEntry = function (entry) {
        this._entries[entry.id] = entry;
    };
    TestCase.prototype.removeEntry = function (id) {
        delete this._entries[id];
    };
    Object.defineProperty(TestCase.prototype, "env", {
        get: function () {
            return this._env;
        },
        set: function (env) {
            this._env = env;
        },
        enumerable: true,
        configurable: true
    });
    TestCase.prototype.isReadyToRun = function () {
        return (Utils_1.Util.getObjLength(this.entries) > 2);
    };
    TestCase.create = function (testCaseEntity) {
        return new TestCase(testCaseEntity);
    };
    TestCase.createEmptyEntity = function () {
        return {
            title: '',
            slug: Utils_1.Util.randomString(10),
            description: '',
            status: 'public',
            harness: {
                html: '',
                setUp: '',
                tearDown: ''
            },
            entries: [
                { id: 1, title: '', code: '' },
                { id: 2, title: '', code: '' }
            ]
        };
    };
    TestCase.createEntityFromDOMElement = function (id) {
        var $elem = document.getElementById(id);
        var result = formToObject($elem);
        return result.testCase;
    };
    TestCase.createEmptyTestCaseEntry = function (id) {
        return {
            id: id,
            title: '',
            code: ''
        };
    };
    return TestCase;
}());
exports.TestCase = TestCase;
},{"./Utils":8}],7:[function(require,module,exports){
"use strict";
var App_1 = require('./App');
var TotalChartPanel = (function () {
    function TotalChartPanel(page, testCase) {
        this.page = page;
        this.testCase = testCase;
    }
    TotalChartPanel.prototype.getData = function () {
        return App_1.App.http.getJSON(App_1.App.config.serverUri + "/test/" + this.testCase.slug + "/totals/by-browser.json");
    };
    TotalChartPanel.prototype.render = function (data) {
        var _this = this;
        var $chartDiv = document.getElementById('chart-results');
        if ($chartDiv.className === 'rendered') {
            this._render(data);
        }
        else {
            google.charts.load('current', { packages: ['corechart', 'bar'] });
            google.charts.setOnLoadCallback(function () {
                _this._render(data);
            });
        }
    };
    TotalChartPanel.prototype._render = function (data) {
        var $chartDiv = document.getElementById('chart-results');
        var chart = new google.visualization.BarChart($chartDiv);
        var browsers = [];
        var resultsSet = [];
        data.map(function (entry) {
            var entryResults = {
                title: entry.title
            };
            entry.totals.forEach(function (total) {
                var browserIdentifier = total.browserName;
                if (browsers.indexOf(browserIdentifier) === -1) {
                    browsers.push(browserIdentifier);
                }
                entryResults[browserIdentifier] = parseInt(total.metricValue);
            });
            resultsSet.push(_.map(entryResults));
        });
        browsers.unshift('Total');
        resultsSet.unshift(browsers);
        var options = {
            legend: {
                position: 'bottom'
            },
            bars: 'horizontal',
            chartArea: {
                width: '100%',
                height: '80%'
            }
        };
        chart.draw(google.visualization.arrayToDataTable(resultsSet), options);
        $chartDiv.className = 'rendered';
    };
    return TotalChartPanel;
}());
exports.TotalChartPanel = TotalChartPanel;
},{"./App":1}],8:[function(require,module,exports){
"use strict";
var Util = (function () {
    function Util() {
    }
    Util.randomString = function (len, charSet) {
        charSet = charSet || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        var randomString = '';
        for (var i = 0; i < len; i++) {
            var randomPoz = Math.floor(Math.random() * charSet.length);
            randomString += charSet.substring(randomPoz, randomPoz + 1);
        }
        return randomString;
    };
    Util.getObjLength = function (o) {
        if (typeof o !== 'object' || o === null) {
            return 0;
        }
        var l = 0;
        var k;
        if (typeof Object.keys === 'function') {
            l = Object.keys(o).length;
        }
        else {
            for (k in o) {
                if (o.hasOwnProperty(k)) {
                    l++;
                }
            }
        }
        return l;
    };
    Util.escapeForRegex = function (str) {
        return str.replace(/[-\/\\^$*+?.()|[\]]/g, '\\$&');
    };
    return Util;
}());
exports.Util = Util;
},{}],9:[function(require,module,exports){
"use strict";
var App_1 = require('./App');
var serverUri = window.location.host === 'jsbench.org' ? 'http://api.jsbench.org/v2' : 'http://api-dev.jsbench.org/v2';
var clientUri = 'http://' + window.location.host;
new App_1.App({
    serverUri: serverUri,
    clientUri: clientUri
});
},{"./App":1}]},{},[9])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
