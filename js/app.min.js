(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var Http_1 = require('./Http');
var Page_1 = require('./Page');
var TestCase_1 = require('./TestCase');
var Router_1 = require('./Router');
var App = (function () {
    function App(config) {
        console.log('App starting ...');
        App.config = config;
        App.http = new Http_1.Http();
        this.router = new Router_1.Router();
        this.registerHandlebarsHelpers();
        this.router.addRoute('/', function () {
            Q.fcall(function () {
                var testCase = new TestCase_1.TestCase(TestCase_1.TestCase.createEmptyEntity());
                return new Page_1.Page(testCase);
            }).then(function (page) {
                page.render();
            });
        });
        this.router.addRoute('/test/{slug}', function (slug) {
            return App.http.getJSON(App.config.serverUri + "/test/" + slug + ".json").then(function (r) {
                var testCase = new TestCase_1.TestCase(r.getBody());
                return new Page_1.Page(testCase);
            }).then(function (page) {
                page.render();
            });
        });
        this.router.run().then(function (a) {
            console.log('Page rendered.');
        }, function (error) {
            Page_1.Page.renderErrorPopup(error.message);
            window.location.href = '/';
        });
    }
    App.prototype.registerHandlebarsHelpers = function () {
        Handlebars.registerHelper('if_eq', function (a, b, opts) {
            if (a === b) {
                return opts.fn(this);
            }
            else {
                return opts.inverse(this);
            }
        });
        Handlebars.registerHelper('if_gt', function (a, b, opts) {
            if (a > b) {
                return opts.fn(this);
            }
            else {
                return opts.inverse(this);
            }
        });
        Handlebars.registerHelper('timestamp', function () {
            return (new Date()).getTime();
        });
    };
    App.prototype.bindErrorLogging = function () {
        if (!('onerror' in window)) {
            return false;
        }
        var timeStamp = (new Date()).getTime();
        window.onerror = function (msg, url, lineNo, columnNo, error) {
            var diff = (new Date()).getTime() - timeStamp;
            var minutesDifference = Math.floor(diff / 1000 / 60);
            console.log('Minutes difference: ', minutesDifference);
            var errorDTO = {
                msg: msg,
                url: url || window.location.href,
                lineNo: lineNo,
                colNo: columnNo,
                trace: error.toString()
            };
            App.http.postJSON(App.config.serverUri + "/log.json", errorDTO).then(function () {
                timeStamp = (new Date()).getTime();
            });
        };
    };
    ;
    return App;
}());
exports.App = App;
},{"./Http":2,"./Page":3,"./Router":4,"./TestCase":6}],2:[function(require,module,exports){
"use strict";
var Http = (function () {
    function Http() {
    }
    Http.fromStringToJSON = function (str) {
        return str ? JSON.parse(str) : {};
    };
    Http.fromJSONToString = function (jsonObj) {
        return JSON.stringify(jsonObj);
    };
    Http.contentTypeIsJSON = function (header) {
        if (!header) {
            return false;
        }
        return !!header.match(/application\/json/i);
    };
    Http.prototype.sendRequest = function (request) {
        var deferred = Q.defer();
        var xhr = typeof XMLHttpRequest !== 'undefined' ? new XMLHttpRequest() : null;
        xhr.open(request.getMethod(), request.getUrl(), true);
        (function (headers) {
            for (var i in headers) {
                if (headers.hasOwnProperty(i)) {
                    xhr.setRequestHeader(i, headers[i]);
                }
            }
        })(request.getHeaders());
        var _response = this._response;
        xhr.onload = function () {
            if (xhr.readyState === Http.XHR_DONE) {
                _response = new Response(xhr.status, xhr.response);
                if (Http.contentTypeIsJSON(this.getResponseHeader('content-type'))) {
                    _response.setBody(Http.fromStringToJSON(_response.getBodyRaw()));
                }
                if (xhr.status === Http.HTTP_SUCCESS || xhr.status === Http.HTTP_CREATED) {
                    deferred.resolve(_response);
                }
                else {
                    deferred.reject(_response);
                }
            }
        };
        if (request.getBody()) {
            xhr.send(request.getBody());
        }
        else {
            xhr.send();
        }
        return deferred.promise;
    };
    Object.defineProperty(Http.prototype, "request", {
        get: function () {
            return this._request;
        },
        set: function (request) {
            this._request = request;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Http.prototype, "response", {
        get: function () {
            return this._response;
        },
        set: function (response) {
            this._response = response;
        },
        enumerable: true,
        configurable: true
    });
    Http.prototype.send = function (method, url, body) {
        return this.sendRequest(new Request(method, url, null, body));
    };
    Http.prototype.getJSON = function (url) {
        return this.sendRequest(new Request('GET', url, { 'Content-Type': 'application/json', 'Accept': 'application/json' }, null)).then(function (response) {
            return response;
        });
    };
    ;
    Http.prototype.postJSON = function (url, body) {
        var bodyString = Http.fromJSONToString(body);
        return this.sendRequest(new Request('POST', url, { 'Content-Type': 'application/json', 'Accept': 'application/json' }, bodyString)).then(function (response) {
            return response;
        });
    };
    ;
    Http.prototype.getHTML = function (url) {
        return this.sendRequest(new Request('GET', url, { 'Content-Type': 'text/html', 'Accept': 'text/html' }, null));
    };
    ;
    Http.HTTP_SUCCESS = 200;
    Http.HTTP_CREATED = 201;
    Http.HTTP_NOT_FOUND = 404;
    Http.HTTP_BAD_REQUEST = 400;
    Http.XHR_UNSENT = 0;
    Http.XHR_OPENED = 1;
    Http.XHR_HEADERS_RECEIVED = 2;
    Http.XHR_LOADING = 3;
    Http.XHR_DONE = 4;
    return Http;
}());
exports.Http = Http;
var Request = (function () {
    function Request(method, url, headers, body) {
        this.method = method;
        this.url = url;
        this.headers = headers || {};
        this.body = body;
    }
    ;
    Request.prototype.getMethod = function () {
        return this.method;
    };
    ;
    Request.prototype.getUrl = function () {
        return this.url;
    };
    ;
    Request.prototype.getHeaders = function () {
        return this.headers;
    };
    ;
    Request.prototype.getBody = function () {
        return this.body;
    };
    ;
    return Request;
}());
var Response = (function () {
    function Response(status, body) {
        this.status = status;
        this.body = body;
        this.bodyRaw = body;
    }
    ;
    Response.prototype.setStatus = function (status) {
        this.status = status;
    };
    ;
    Response.prototype.getStatus = function () {
        return this.status;
    };
    ;
    Response.prototype.setBody = function (body) {
        this.body = body;
    };
    ;
    Response.prototype.getBody = function () {
        return this.body;
    };
    ;
    Response.prototype.getBodyRaw = function () {
        return this.bodyRaw;
    };
    return Response;
}());
},{}],3:[function(require,module,exports){
"use strict";
var TestCase_1 = require('./TestCase');
var App_1 = require('./App');
var Runner_1 = require('./Runner');
var TotalChartPanel_1 = require('./TotalChartPanel');
var Page = (function () {
    function Page(testCase) {
        console.log('TestCase constructor ...');
        this.testCase = testCase;
    }
    Page.renderElem = function (id, html, data) {
        var $elem = document.getElementById(id);
        var template = Handlebars.compile(html);
        $elem.innerHTML = template(data);
    };
    Page.prototype.render = function () {
        var _this = this;
        Q.spread([
            App_1.App.http.getJSON(App_1.App.config.serverUri + '/tests.json?exclude=revision_number,description,harness,entries,status&orderBy=latest&limit=25'),
            App_1.App.http.getHTML(App_1.App.config.clientUri + '/tpl/testcase-sidebar-listing.hbs')
        ], function (dataR, tplR) {
            Page.renderElem('sidebar-listing', tplR.getBody(), dataR.getBody());
        });
        Q.spread([
            App_1.App.http.getHTML(App_1.App.config.clientUri + '/tpl/testcase-entry-form.hbs'),
            App_1.App.http.getHTML(App_1.App.config.clientUri + '/tpl/testcase-main-form.hbs')
        ], function (tplEntryR, tplMainR) {
            Handlebars.registerPartial('entry', tplEntryR.getBody());
            Page.renderElem('testcase-main-form', tplMainR.getBody(), _this.testCase);
        }).then(function () {
            _this.bindSaveBtn();
            _this.bindAddTestEntryBtn();
            _this.bindRunBtn();
        });
    };
    Page.renderErrorPopup = function (error) {
        var msgTxt = 'Some kind of error occurred.';
        if (typeof error === 'object' && typeof error.error !== 'undefined' && error.error.message) {
            msgTxt = error.error.message;
        }
        else if (typeof error === 'string') {
            msgTxt = error;
        }
        window.alert(msgTxt);
    };
    Page.prototype.renderChartPanel = function () {
        var panel = new TotalChartPanel_1.TotalChartPanel(this, this.testCase);
        panel.getData().then(function (r) {
            panel.render(r.getBody());
        }, function (response) {
            Page.renderErrorPopup(response.getBody());
        });
    };
    ;
    Page.prototype.bindSaveBtn = function () {
        var $saveBtn = document.getElementById('save-testcase-button');
        $saveBtn.addEventListener('click', function (e) {
            e.preventDefault();
            Page.toggleRenderBtn('save-testcase-button', 'disable');
            var testCaseDTO = TestCase_1.TestCase.createEntityFromDOMElement('testcase-main-form');
            testCaseDTO.env = {
                browserName: platform.name,
                browserVersion: platform.version,
                os: platform.os
            };
            App_1.App.http.postJSON(App_1.App.config.serverUri + '/tests.json', testCaseDTO)
                .then(function () {
                Page.toggleRenderBtn('save-testcase-button', 'activate');
            }, function (response) {
                Page.toggleRenderBtn('save-testcase-button', 'activate');
                Page.renderErrorPopup(response.getBody());
            });
        });
    };
    Page.prototype.bindRunBtn = function () {
        var _page = this;
        var $runBtn = document.getElementById('run-testcase-button');
        $runBtn.addEventListener('click', function (e) {
            e.preventDefault();
            Page.toggleRenderBtn('run-testcase-button', 'disable');
            var testCaseDTO = TestCase_1.TestCase.createEntityFromDOMElement('testcase-main-form');
            testCaseDTO.env = {
                browserName: platform.name,
                browserVersion: platform.version,
                os: platform.os
            };
            App_1.App.http.getHTML(App_1.App.config.clientUri + "/tpl/testcase-results-table.hbs")
                .then(function (r) {
                Page.renderElem('results', r.getBody(), testCaseDTO);
                var runner = new Runner_1.Runner(new TestCase_1.TestCase(testCaseDTO));
                runner.run().then(function (results) {
                    Page.toggleRenderBtn('run-testcase-button', 'activate');
                    _page.sendResults(results).then(function () {
                        console.log('Rendering Chart Panel ...');
                        _page.renderChartPanel();
                    });
                }, function (error) {
                    Page.renderErrorPopup(error);
                });
            });
        }, false);
    };
    Page.prototype.bindAddTestEntryBtn = function () {
        var _this = this;
        var $btn = document.getElementById('add-test-link');
        $btn.addEventListener('click', function (e) {
            e.preventDefault();
            console.log('click?');
            App_1.App.http.getHTML(App_1.App.config.clientUri + "/tpl/testcase-entry-form.hbs").then(function (response) {
                var entryId = Page.getNextTestCaseEntryId();
                var newTestEntry = TestCase_1.TestCase.createEmptyTestCaseEntry(entryId);
                _this.testCase.addEntry(newTestEntry);
                var template = Handlebars.compile(response.getBody());
                var html = template(newTestEntry);
                var $newEntry = document.createElement('div');
                $newEntry.innerHTML = html;
                var $entries = document.getElementById('entries');
                $entries.appendChild($newEntry.firstChild);
                _this.bindRemoveTestEntryBtn(entryId);
            });
        });
    };
    ;
    Page.prototype.bindRemoveTestEntryBtn = function (entryId) {
        var _this = this;
        var $entries = document.getElementById('entries');
        var $entry = document.getElementById('testcase-test-' + entryId);
        var $button = $entry.getElementsByClassName('testcase-test-remove');
        $button[0].addEventListener('click', function (e) {
            console.log('click?');
            _this.testCase.removeEntry(entryId);
            $entries.removeChild($entry);
        });
    };
    ;
    Page.getNextTestCaseEntryId = function () {
        return document.getElementsByClassName('testcase-test').length + 1;
    };
    Page.toggleRenderBtn = function (id, status) {
        var $btn = document.getElementById(id);
        if (status === 'activate') {
            $btn.classList.remove('btn-loading');
            $btn.disabled = false;
        }
        else {
            $btn.className += ' btn-loading';
            $btn.disabled = true;
        }
    };
    Page.prototype.sendResults = function (results) {
        var testCaseDTO = TestCase_1.TestCase.createEntityFromDOMElement('testcase-main-form');
        for (var i in results) {
            if (!results.hasOwnProperty(i)) {
                continue;
            }
            testCaseDTO.entries[i].results = results[i];
        }
        testCaseDTO.env = {
            browserName: platform.name,
            browserVersion: platform.version,
            os: platform.os
        };
        console.log(testCaseDTO, JSON.stringify(testCaseDTO));
        this.testCase = TestCase_1.TestCase.create(testCaseDTO);
        return App_1.App.http.postJSON(App_1.App.config.serverUri + "/tests.json", testCaseDTO);
    };
    ;
    return Page;
}());
exports.Page = Page;
},{"./App":1,"./Runner":5,"./TestCase":6,"./TotalChartPanel":7}],4:[function(require,module,exports){
"use strict";
var Router = (function () {
    function Router() {
        this.routes = [];
    }
    Router.prototype.run = function (customPath) {
        var deferred = Q.defer();
        var path = customPath ? customPath : window.location.pathname;
        var route = this.matchRoute(path);
        if (route) {
            deferred.resolve(route.action.apply(null, route.args));
        }
        else {
            deferred.reject(new Error('No valid route found.'));
        }
        return deferred.promise;
    };
    Router.prototype.addRoute = function (path, action) {
        if (!path || !action) {
            return false;
        }
        this.routes.push({
            path: path,
            action: action
        });
    };
    Router.prototype.matchRoute = function (path) {
        var matchFound;
        var preparedPath;
        for (var i = 0; i < this.routes.length; i++) {
            preparedPath = "^" + Router.preparePath(this.routes[i].path) + "$";
            matchFound = path.match(new RegExp(preparedPath, 'i'));
            if (matchFound) {
                var args = matchFound.slice(1, matchFound.length);
                return {
                    path: this.routes[i].path,
                    action: this.routes[i].action,
                    args: args,
                    requestedPath: path
                };
            }
        }
    };
    Router.preparePath = function (path) {
        return path.replace(/{[a-z]+}/g, '([a-z0-9-]+)');
    };
    return Router;
}());
exports.Router = Router;
},{}],5:[function(require,module,exports){
"use strict";
var Runner = (function () {
    function Runner(testCase) {
        this.testCase = testCase;
    }
    Runner.prototype.run = function () {
        if (!this.testCase.isReadyToRun()) {
            throw new Error('You need to have at least two code entries in order to run the test case.');
        }
        console.log('Starting runner ...');
        return this.startBench();
    };
    Runner.prototype.startBench = function () {
        var deferredQ = Q.defer();
        var testCase = this.testCase;
        var benches = [];
        var bench;
        var results = {};
        for (var j in testCase.entries) {
            if (!testCase.entries.hasOwnProperty(j)) {
                continue;
            }
            bench = new Benchmark(testCase.entries[j].title, {
                id: j,
                async: true,
                setup: testCase.harness.setUp,
                teardown: testCase.harness.tearDown,
                fn: testCase.entries[j].code,
                onStart: function (e) {
                    var benchResult = e.target;
                    Runner.renderResult(benchResult.id, 'Starting ...');
                },
                onComplete: function (e) {
                    var benchResult = e.target;
                    results[benchResult.id] = {
                        id: benchResult.id,
                        error: benchResult.error ? Benchmark.join(benchResult.error) : null,
                        opsPerSec: benchResult.hz.toFixed(benchResult.hz < 100 ? 2 : 0),
                        opsPerSecFormatted: Benchmark.formatNumber(benchResult.hz.toFixed(benchResult.hz < 100 ? 2 : 0)),
                        pm: benchResult.stats.rme.toFixed(2),
                        runSamples: benchResult.stats.sample.length
                    };
                    Runner.renderResult(benchResult.id, results[benchResult.id].opsPerSecFormatted + ' (&plusmn;' + results[benchResult.id].pm + ')');
                }
            });
            benches.push(bench);
        }
        setTimeout(function () {
            Benchmark.invoke(benches, {
                name: 'run',
                args: true,
                onStart: function (e) {
                    console.log('Starting benchmarks ...', e);
                },
                onCycle: function (e) {
                    console.log('onCycle here.', e);
                },
                onError: function (e) {
                    console.log('onError here.', e);
                    deferredQ.reject(new Error('Running suite returned an error.'));
                },
                onComplete: function (e) {
                    console.log('onComplete here.', e, results);
                    Runner.renderWinnerResult(Benchmark.filter(benches, 'fastest')[0].id);
                    Runner.renderLoserResult(Benchmark.filter(benches, 'slowest')[0].id);
                    deferredQ.resolve(results);
                }
            });
        }, 2000);
        return deferredQ.promise;
    };
    Runner.renderResult = function (id, text) {
        var $elem = document.getElementById('testcase-test-result-text-' + id);
        $elem.innerHTML = text;
    };
    ;
    Runner.renderWinnerResult = function (id) {
        var $elem = document.getElementById('testcase-test-result-text-' + id);
        $elem.className += ' success';
    };
    ;
    Runner.renderLoserResult = function (id) {
        var $elem = document.getElementById('testcase-test-result-text-' + id);
        $elem.className += ' danger';
    };
    ;
    return Runner;
}());
exports.Runner = Runner;
},{}],6:[function(require,module,exports){
"use strict";
var Utils_1 = require('./Utils');
var TestCase = (function () {
    function TestCase(testCase) {
        this.title = testCase.title;
        this.slug = testCase.slug;
        this.description = testCase.description;
        this.status = testCase.status;
        this.harness = testCase.harness;
        this.entries = testCase.entries;
        this.env = testCase.env;
    }
    Object.defineProperty(TestCase.prototype, "title", {
        get: function () {
            return this._title;
        },
        set: function (title) {
            this._title = title;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestCase.prototype, "slug", {
        get: function () {
            return this._slug;
        },
        set: function (slug) {
            this._slug = slug;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestCase.prototype, "description", {
        get: function () {
            return this._description;
        },
        set: function (description) {
            this._description = description;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestCase.prototype, "status", {
        get: function () {
            return this._status;
        },
        set: function (status) {
            this._status = status;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestCase.prototype, "harness", {
        get: function () {
            return this._harness;
        },
        set: function (harness) {
            this._harness = harness;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TestCase.prototype, "entries", {
        get: function () {
            return this._entries;
        },
        set: function (entries) {
            this._entries = entries;
        },
        enumerable: true,
        configurable: true
    });
    TestCase.prototype.addEntry = function (entry) {
        this._entries[entry.id] = entry;
    };
    TestCase.prototype.removeEntry = function (id) {
        delete this._entries[id];
    };
    Object.defineProperty(TestCase.prototype, "env", {
        get: function () {
            return this._env;
        },
        set: function (env) {
            this._env = env;
        },
        enumerable: true,
        configurable: true
    });
    TestCase.prototype.isReadyToRun = function () {
        return (Utils_1.Util.getObjLength(this.entries) >= 2);
    };
    TestCase.create = function (testCaseEntity) {
        return new TestCase(testCaseEntity);
    };
    TestCase.createEmptyEntity = function () {
        return {
            title: '',
            slug: Utils_1.Util.randomString(10),
            description: '',
            status: 'public',
            harness: {
                html: '',
                setUp: '',
                tearDown: ''
            },
            entries: [
                { id: 1, title: '', code: '' },
                { id: 2, title: '', code: '' }
            ]
        };
    };
    TestCase.createEntityFromDOMElement = function (id) {
        var $elem = document.getElementById(id);
        var result = formToObject($elem);
        return result.testCase;
    };
    TestCase.createEmptyTestCaseEntry = function (id) {
        return {
            id: id,
            title: '',
            code: ''
        };
    };
    return TestCase;
}());
exports.TestCase = TestCase;
},{"./Utils":8}],7:[function(require,module,exports){
"use strict";
var App_1 = require('./App');
var TotalChartPanel = (function () {
    function TotalChartPanel(page, testCase) {
        this.page = page;
        this.testCase = testCase;
    }
    TotalChartPanel.prototype.getData = function () {
        return App_1.App.http.getJSON(App_1.App.config.serverUri + "/test/" + this.testCase.slug + "/totals/by-browser.json");
    };
    TotalChartPanel.prototype.render = function (data) {
        var _this = this;
        var $chartDiv = document.getElementById('chart-results');
        if ($chartDiv.className === 'rendered') {
            this._render(data);
        }
        else {
            google.charts.load('current', { packages: ['corechart', 'bar'] });
            google.charts.setOnLoadCallback(function () {
                _this._render(data);
            });
        }
    };
    TotalChartPanel.prototype._render = function (data) {
        var $chartDiv = document.getElementById('chart-results');
        var chart = new google.visualization.BarChart($chartDiv);
        var browsers = [];
        var resultsSet = [];
        data.map(function (entry) {
            var entryResults = {
                title: entry.title
            };
            entry.totals.forEach(function (total) {
                var browserIdentifier = total.browserName;
                if (browsers.indexOf(browserIdentifier) === -1) {
                    browsers.push(browserIdentifier);
                }
                entryResults[browserIdentifier] = parseInt(total.metricValue);
            });
            resultsSet.push(_.map(entryResults));
        });
        browsers.unshift('Total');
        resultsSet.unshift(browsers);
        var options = {
            legend: {
                position: 'bottom'
            },
            bars: 'horizontal',
            chartArea: {
                width: '100%',
                height: '80%'
            }
        };
        chart.draw(google.visualization.arrayToDataTable(resultsSet), options);
        $chartDiv.className = 'rendered';
    };
    return TotalChartPanel;
}());
exports.TotalChartPanel = TotalChartPanel;
},{"./App":1}],8:[function(require,module,exports){
"use strict";
var Util = (function () {
    function Util() {
    }
    Util.randomString = function (len, charSet) {
        charSet = charSet || 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        var randomString = '';
        for (var i = 0; i < len; i++) {
            var randomPoz = Math.floor(Math.random() * charSet.length);
            randomString += charSet.substring(randomPoz, randomPoz + 1);
        }
        return randomString;
    };
    Util.getObjLength = function (o) {
        if (typeof o !== 'object' || o === null) {
            return 0;
        }
        var l = 0;
        var k;
        if (typeof Object.keys === 'function') {
            l = Object.keys(o).length;
        }
        else {
            for (k in o) {
                if (o.hasOwnProperty(k)) {
                    l++;
                }
            }
        }
        return l;
    };
    Util.escapeForRegex = function (str) {
        return str.replace(/[-\/\\^$*+?.()|[\]]/g, '\\$&');
    };
    return Util;
}());
exports.Util = Util;
},{}],9:[function(require,module,exports){
"use strict";
var App_1 = require('./App');
var serverUri = window.location.host === 'jsbench.org' ? 'http://api.jsbench.org/v2' : 'http://api-dev.jsbench.org/v2';
var clientUri = 'http://' + window.location.host;
new App_1.App({
    serverUri: serverUri,
    clientUri: clientUri
});
},{"./App":1}]},{},[9])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJ0cy9BcHAudHMiLCJ0cy9IdHRwLnRzIiwidHMvUGFnZS50cyIsInRzL1JvdXRlci50cyIsInRzL1J1bm5lci50cyIsInRzL1Rlc3RDYXNlLnRzIiwidHMvVG90YWxDaGFydFBhbmVsLnRzIiwidHMvVXRpbHMudHMiLCJ0cy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUNBQSxxQkFBMEMsUUFBUSxDQUFDLENBQUE7QUFDbkQscUJBQW1CLFFBQVEsQ0FBQyxDQUFBO0FBQzVCLHlCQUF1QyxZQUFZLENBQUMsQ0FBQTtBQUNwRCx1QkFBcUIsVUFBVSxDQUFDLENBQUE7QUFFaEM7SUFLSSxhQUFtQixNQUEwQjtRQUN6QyxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDaEMsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDcEIsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLFdBQUksRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxlQUFNLEVBQUUsQ0FBQztRQUMzQixJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztRQUdqQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUU7WUFDdEIsQ0FBQyxDQUFDLEtBQUssQ0FBQztnQkFDSixJQUFJLFFBQVEsR0FBRyxJQUFJLG1CQUFRLENBQUMsbUJBQVEsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUM7Z0JBQzFELE1BQU0sQ0FBQyxJQUFJLFdBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM5QixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBUyxJQUFVO2dCQUN2QixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDbEIsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztRQUVI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QyxPQUFPLENBQUMsc0JBQXNCLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUNMLFdBQUM7QUFBRCxDQXpDQSxBQXlDQyxJQUFBO0FBekNZLFlBQUksT0F5Q2hCLENBQUE7OztBQ3pDRCxvQkFBa0IsT0FBTyxDQUFDLENBQUE7QUFFMUIsSUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEtBQUssYUFBYSxHQUFHLDJCQUEyQixHQUFHLCtCQUErQixDQUFDO0FBQ3ZILElBQUksU0FBUyxHQUFHLFNBQVMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztBQUVqRCxJQUFJLFNBQUcsQ0FBQztJQUNKLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLFNBQVMsRUFBRyxTQUFTO0NBQ3hCLENBQUMsQ0FBQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJpbXBvcnQge0h0dHAsIEh0dHBSZXNwb25zZUludGVyZmFjZX0gZnJvbSAnLi9IdHRwJztcclxuaW1wb3J0IHtQYWdlfSBmcm9tICcuL1BhZ2UnO1xyXG5pbXBvcnQge1Rlc3RDYXNlLCBUZXN0Q2FzZUVudGl0eX0gZnJvbSAnLi9UZXN0Q2FzZSc7XHJcbmltcG9ydCB7Um91dGVyfSBmcm9tICcuL1JvdXRlcic7XHJcblxyXG5leHBvcnQgY2xhc3MgQXBwIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgY29uZmlnOiBBcHBDb25maWdJbnRlcmZhY2U7XHJcbiAgICBwdWJsaWMgc3RhdGljIGh0dHA6IEh0dHA7XHJcbiAgICBwdWJsaWMgcm91dGVyOiBSb3V0ZXI7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGNvbmZpZzogQXBwQ29uZmlnSW50ZXJmYWNlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0FwcCBzdGFydGluZyAuLi4nKTtcclxuICAgICAgICBBcHAuY29uZmlnID0gY29uZmlnO1xyXG4gICAgICAgIEFwcC5odHRwID0gbmV3IEh0dHAoKTtcclxuICAgICAgICB0aGlzLnJvdXRlciA9IG5ldyBSb3V0ZXIoKTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVySGFuZGxlYmFyc0hlbHBlcnMoKTtcclxuXHJcbiAgICAgICAgLy8gQWRkICdkZWZhdWx0JyByb3V0ZXMuXHJcbiAgICAgICAgdGhpcy5yb3V0ZXIuYWRkUm91dGUoJy8nLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgUS5mY2FsbChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0ZXN0Q2FzZSA9IG5ldyBUZXN0Q2FzZShUZXN0Q2FzZS5jcmVhdGVFbXB0eUVudGl0eSgpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUGFnZSh0ZXN0Q2FzZSk7XHJcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocGFnZTogUGFnZSkge1xyXG4gICAgICAgICAgICAgICAgcGFnZS5yZW5kZXIoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMucm91dGVyLmFkZFJvdXRlKCcvdGVzdC97c2x1Z30nLCBmdW5jdGlvbihzbHVnOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEFwcC5odHRwLmdldEpTT04oYCR7QXBwLmNvbmZpZy5zZXJ2ZXJVcml9L3Rlc3QvJHtzbHVnfS5qc29uYCkudGhlbihmdW5jdGlvbiAocjogSHR0cFJlc3BvbnNlSW50ZXJmYWNlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGVzdENhc2UgPSBuZXcgVGVzdENhc2UoPFRlc3RDYXNlRW50aXR5PnIuZ2V0Qm9keSgpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUGFnZSh0ZXN0Q2FzZSk7XHJcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocGFnZTogUGFnZSkge1xyXG4gICAgICAgICAgICAgICAgcGFnZS5yZW5kZXIoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMucm91dGVyLnJ1bigpLnRoZW4oZnVuY3Rpb24oYSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnUGFnZSByZW5kZXJlZC4nKTtcclxuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcjogRXJyb3IpIHtcclxuICAgICAgICAgICAgUGFnZS5yZW5kZXJFcnJvclBvcHVwKGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvJztcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgcmVnaXN0ZXJIYW5kbGViYXJzSGVscGVycygpIHtcclxuICAgICAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdpZl9lcScsIGZ1bmN0aW9uKGE6IGFueSwgYjogYW55LCBvcHRzOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKGEgPT09IGIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLmZuKHRoaXMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMuaW52ZXJzZSh0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdpZl9ndCcsIGZ1bmN0aW9uKGE6IGFueSwgYjogYW55LCBvcHRzOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKGEgPiBiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5mbih0aGlzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLmludmVyc2UodGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcigndGltZXN0YW1wJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBiaW5kRXJyb3JMb2dnaW5nKCkge1xyXG4gICAgICAgIGlmICghKCdvbmVycm9yJyBpbiB3aW5kb3cpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciB0aW1lU3RhbXAgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xyXG5cclxuICAgICAgICB3aW5kb3cub25lcnJvciA9IGZ1bmN0aW9uKG1zZywgdXJsLCBsaW5lTm8sIGNvbHVtbk5vLCBlcnJvcikge1xyXG5cclxuICAgICAgICAgICAgdmFyIGRpZmYgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpIC0gdGltZVN0YW1wO1xyXG4gICAgICAgICAgICB2YXIgbWludXRlc0RpZmZlcmVuY2UgPSBNYXRoLmZsb29yKGRpZmYgLyAxMDAwIC8gNjApO1xyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ01pbnV0ZXMgZGlmZmVyZW5jZTogJywgbWludXRlc0RpZmZlcmVuY2UpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGVycm9yRFRPID0ge1xyXG4gICAgICAgICAgICAgICAgbXNnOiBtc2csXHJcbiAgICAgICAgICAgICAgICB1cmw6IHVybCB8fCB3aW5kb3cubG9jYXRpb24uaHJlZixcclxuICAgICAgICAgICAgICAgIGxpbmVObzogbGluZU5vLFxyXG4gICAgICAgICAgICAgICAgY29sTm86IGNvbHVtbk5vLFxyXG4gICAgICAgICAgICAgICAgdHJhY2U6IGVycm9yLnRvU3RyaW5nKClcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIEFwcC5odHRwLnBvc3RKU09OKGAke0FwcC5jb25maWcuc2VydmVyVXJpfS9sb2cuanNvbmAsIGVycm9yRFRPKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdGltZVN0YW1wID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbn1cclxuXHJcbmludGVyZmFjZSBBcHBDb25maWdJbnRlcmZhY2Uge1xyXG4gICAgc2VydmVyVXJpOiBzdHJpbmc7XHJcbiAgICBjbGllbnRVcmk6IHN0cmluZztcclxufVxyXG4iLCJpbXBvcnQgUHJvbWlzZSA9IFEuUHJvbWlzZTtcclxuZXhwb3J0IGNsYXNzIEh0dHAge1xyXG4gICAgcHJvdGVjdGVkIF9yZXF1ZXN0OiBIdHRwUmVxdWVzdEludGVyZmFjZTtcclxuICAgIHByb3RlY3RlZCBfcmVzcG9uc2U6IEh0dHBSZXNwb25zZUludGVyZmFjZTtcclxuXHJcbiAgICAvLyBIVFRQIGNvZGVzLlxyXG4gICAgcHVibGljIHN0YXRpYyBIVFRQX1NVQ0NFU1M6IG51bWJlciA9IDIwMDtcclxuICAgIHB1YmxpYyBzdGF0aWMgSFRUUF9DUkVBVEVEOiBudW1iZXIgPSAyMDE7XHJcbiAgICBwdWJsaWMgc3RhdGljIEhUVFBfTk9UX0ZPVU5EOiBudW1iZXIgPSA0MDQ7XHJcbiAgICBwdWJsaWMgc3RhdGljIEhUVFBfQkFEX1JFUVVFU1Q6IG51bWJlciA9IDQwMDtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIFhIUl9VTlNFTlQ6IG51bWJlciA9IDA7XHJcbiAgICBwdWJsaWMgc3RhdGljIFhIUl9PUEVORUQ6IG51bWJlciA9IDE7XHJcbiAgICBwdWJsaWMgc3RhdGljIFhIUl9IRUFERVJTX1JFQ0VJVkVEOiBudW1iZXIgPSAyO1xyXG4gICAgcHVibGljIHN0YXRpYyBYSFJfTE9BRElORzogbnVtYmVyID0gMztcclxuICAgIHB1YmxpYyBzdGF0aWMgWEhSX0RPTkU6IG51bWJlciA9IDQ7XHJcblxyXG4gICAgcHJvdGVjdGVkIHN0YXRpYyBmcm9tU3RyaW5nVG9KU09OKHN0cjogc3RyaW5nKTogT2JqZWN0IHtcclxuICAgICAgICByZXR1cm4gc3RyID8gSlNPTi5wYXJzZShzdHIpIDoge307XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIHN0YXRpYyBmcm9tSlNPTlRvU3RyaW5nKGpzb25PYmo6IE9iamVjdCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGpzb25PYmopO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBzdGF0aWMgY29udGVudFR5cGVJc0pTT04oaGVhZGVyOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIWhlYWRlcikgeyByZXR1cm4gZmFsc2U7IH1cclxuICAgICAgICByZXR1cm4gISFoZWFkZXIubWF0Y2goL2FwcGxpY2F0aW9uXFwvanNvbi9pKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2VuZFJlcXVlc3QocmVxdWVzdDogSHR0cFJlcXVlc3RJbnRlcmZhY2UpOiBQcm9taXNlPEh0dHBSZXNwb25zZUludGVyZmFjZT4ge1xyXG4gICAgICAgIHZhciBkZWZlcnJlZCA9IFEuZGVmZXI8SHR0cFJlc3BvbnNlSW50ZXJmYWNlPigpO1xyXG4gICAgICAgIHZhciB4aHIgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnID8gbmV3IFhNTEh0dHBSZXF1ZXN0KCkgOiBudWxsO1xyXG4gICAgICAgIHhoci5vcGVuKHJlcXVlc3QuZ2V0TWV0aG9kKCksIHJlcXVlc3QuZ2V0VXJsKCksIHRydWUpO1xyXG5cclxuICAgICAgICAoZnVuY3Rpb24oaGVhZGVyczogSHR0cEhlYWRlcnNJbnRlcmZhY2UpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBoZWFkZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGVycy5oYXNPd25Qcm9wZXJ0eShpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGksIGhlYWRlcnNbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkocmVxdWVzdC5nZXRIZWFkZXJzKCkpO1xyXG5cclxuICAgICAgICB2YXIgX3Jlc3BvbnNlID0gdGhpcy5fcmVzcG9uc2U7XHJcbiAgICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IEh0dHAuWEhSX0RPTkUpIHtcclxuICAgICAgICAgICAgICAgIF9yZXNwb25zZSA9IG5ldyBSZXNwb25zZSh4aHIuc3RhdHVzLCB4aHIucmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgLy8gQ29udmVydCB0aGUgcmVzcG9uc2UgYm9keSB0byBKU09OLlxyXG4gICAgICAgICAgICAgICAgLy8gS2VlcCB0aGUgcmF3IGJvZHkgdW50b3VjaGVkLlxyXG4gICAgICAgICAgICAgICAgaWYgKEh0dHAuY29udGVudFR5cGVJc0pTT04odGhpcy5nZXRSZXNwb25zZUhlYWRlcignY29udGVudC10eXBlJykpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3Jlc3BvbnNlLnNldEJvZHkoSHR0cC5mcm9tU3RyaW5nVG9KU09OKF9yZXNwb25zZS5nZXRCb2R5UmF3KCkpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSBIdHRwLkhUVFBfU1VDQ0VTUyB8fCB4aHIuc3RhdHVzID09PSBIdHRwLkhUVFBfQ1JFQVRFRCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoX3Jlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KF9yZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAocmVxdWVzdC5nZXRCb2R5KCkpIHtcclxuICAgICAgICAgICAgeGhyLnNlbmQocmVxdWVzdC5nZXRCb2R5KCkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHhoci5zZW5kKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IHJlcXVlc3QoKTogSHR0cFJlcXVlc3RJbnRlcmZhY2Uge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgcmVxdWVzdChyZXF1ZXN0OiBIdHRwUmVxdWVzdEludGVyZmFjZSkge1xyXG4gICAgICAgIHRoaXMuX3JlcXVlc3QgPSByZXF1ZXN0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgcmVzcG9uc2UoKTogSHR0cFJlc3BvbnNlSW50ZXJmYWNlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmVzcG9uc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCByZXNwb25zZShyZXNwb25zZTogSHR0cFJlc3BvbnNlSW50ZXJmYWNlKSB7XHJcbiAgICAgICAgdGhpcy5fcmVzcG9uc2UgPSByZXNwb25zZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2VuZChtZXRob2Q6IHN0cmluZywgdXJsOiBzdHJpbmcsIGJvZHk6IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmRSZXF1ZXN0KFxyXG4gICAgICAgICAgICBuZXcgUmVxdWVzdChtZXRob2QsIHVybCwgbnVsbCwgYm9keSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRKU09OKHVybDogc3RyaW5nKTogUHJvbWlzZTxIdHRwUmVzcG9uc2VJbnRlcmZhY2U+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kUmVxdWVzdChcclxuICAgICAgICAgICAgbmV3IFJlcXVlc3QoJ0dFVCcsIHVybCwgeydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbid9LCBudWxsKVxyXG4gICAgICAgICkudGhlbihmdW5jdGlvbihyZXNwb25zZTogSHR0cFJlc3BvbnNlSW50ZXJmYWNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgcHVibGljIHBvc3RKU09OKHVybDogc3RyaW5nLCBib2R5OiBPYmplY3QpOiBQcm9taXNlPEh0dHBSZXNwb25zZUludGVyZmFjZT4ge1xyXG4gICAgICAgIHZhciBib2R5U3RyaW5nID0gSHR0cC5mcm9tSlNPTlRvU3RyaW5nKGJvZHkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNlbmRSZXF1ZXN0KFxyXG4gICAgICAgICAgICBuZXcgUmVxdWVzdCgnUE9TVCcsIHVybCwgeydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbid9LCBib2R5U3RyaW5nKVxyXG4gICAgICAgICkudGhlbihmdW5jdGlvbihyZXNwb25zZTogSHR0cFJlc3BvbnNlSW50ZXJmYWNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgcHVibGljIGdldEhUTUwodXJsOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kUmVxdWVzdChcclxuICAgICAgICAgICAgbmV3IFJlcXVlc3QoJ0dFVCcsIHVybCwgeydDb250ZW50LVR5cGUnOiAndGV4dC9odG1sJywgJ0FjY2VwdCc6ICd0ZXh0L2h0bWwnfSwgbnVsbClcclxuICAgICAgICApO1xyXG4gICAgfTtcclxufVxyXG5cclxuY2xhc3MgUmVxdWVzdCBpbXBsZW1lbnRzIEh0dHBSZXF1ZXN0SW50ZXJmYWNlIHtcclxuICAgIHByb3RlY3RlZCBtZXRob2Q6IHN0cmluZztcclxuICAgIHByb3RlY3RlZCB1cmw6IHN0cmluZztcclxuICAgIHByb3RlY3RlZCBoZWFkZXJzOiBIdHRwSGVhZGVyc0ludGVyZmFjZTtcclxuICAgIHByb3RlY3RlZCBib2R5OiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IobWV0aG9kOiBzdHJpbmcsIHVybDogc3RyaW5nLCBoZWFkZXJzOiBIdHRwSGVhZGVyc0ludGVyZmFjZSwgYm9keTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5tZXRob2QgPSBtZXRob2Q7XHJcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XHJcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycyB8fCB7fTtcclxuICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xyXG4gICAgfTtcclxuXHJcbiAgICBwdWJsaWMgZ2V0TWV0aG9kKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWV0aG9kO1xyXG4gICAgfTtcclxuXHJcbiAgICBwdWJsaWMgZ2V0VXJsKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudXJsO1xyXG4gICAgfTtcclxuXHJcbiAgICBwdWJsaWMgZ2V0SGVhZGVycygpOiBIdHRwSGVhZGVyc0ludGVyZmFjZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGVhZGVycztcclxuICAgIH07XHJcblxyXG4gICAgcHVibGljIGdldEJvZHkoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ib2R5O1xyXG4gICAgfTtcclxufVxyXG5cclxuaW50ZXJmYWNlIEh0dHBSZXF1ZXN0SW50ZXJmYWNlIHtcclxuICAgIGdldE1ldGhvZCgpOiBzdHJpbmc7XHJcbiAgICBnZXRVcmwoKTogc3RyaW5nO1xyXG4gICAgZ2V0SGVhZGVycygpOiBIdHRwSGVhZGVyc0ludGVyZmFjZTtcclxuICAgIGdldEJvZHkoKTogc3RyaW5nIHwgT2JqZWN0O1xyXG59XHJcblxyXG5jbGFzcyBSZXNwb25zZSBpbXBsZW1lbnRzIEh0dHBSZXNwb25zZUludGVyZmFjZSB7XHJcbiAgICBwcm90ZWN0ZWQgc3RhdHVzOiBudW1iZXI7XHJcbiAgICBwcm90ZWN0ZWQgYm9keTogc3RyaW5nIHwgT2JqZWN0O1xyXG4gICAgcHJvdGVjdGVkIGJvZHlSYXc6IHN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzdGF0dXM6IG51bWJlciwgYm9keTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XHJcbiAgICAgICAgdGhpcy5ib2R5ID0gYm9keTtcclxuICAgICAgICB0aGlzLmJvZHlSYXcgPSBib2R5O1xyXG4gICAgfTtcclxuXHJcbiAgICBwdWJsaWMgc2V0U3RhdHVzKHN0YXR1czogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XHJcbiAgICB9O1xyXG5cclxuICAgIHB1YmxpYyBnZXRTdGF0dXMoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0dXM7XHJcbiAgICB9O1xyXG5cclxuICAgIHB1YmxpYyBzZXRCb2R5KGJvZHk6IHN0cmluZyB8IE9iamVjdCkge1xyXG4gICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XHJcbiAgICB9O1xyXG5cclxuICAgIHB1YmxpYyBnZXRCb2R5KCk6IHN0cmluZyB8IE9iamVjdCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYm9keTtcclxuICAgIH07XHJcblxyXG4gICAgcHVibGljIGdldEJvZHlSYXcoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ib2R5UmF3O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEh0dHBSZXNwb25zZUludGVyZmFjZSB7XHJcbiAgICBnZXRTdGF0dXMoKTogbnVtYmVyO1xyXG4gICAgc2V0U3RhdHVzKHN0YXR1czogbnVtYmVyKTogdm9pZDtcclxuICAgIGdldEJvZHkoKTogc3RyaW5nIHwgT2JqZWN0O1xyXG4gICAgc2V0Qm9keShib2R5OiBzdHJpbmcgfCBPYmplY3QpOiB2b2lkO1xyXG4gICAgZ2V0Qm9keVJhdygpOiBzdHJpbmc7XHJcbn1cclxuXHJcbmludGVyZmFjZSBIdHRwSGVhZGVyc0ludGVyZmFjZSB7XHJcbiAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XHJcbn1cclxuIiwiaW1wb3J0IHtUZXN0Q2FzZSwgVGVzdENhc2VFbnZ9IGZyb20gJy4vVGVzdENhc2UnO1xyXG5pbXBvcnQge0FwcH0gZnJvbSAnLi9BcHAnO1xyXG5pbXBvcnQge0h0dHBSZXNwb25zZUludGVyZmFjZX0gZnJvbSAnLi9IdHRwJztcclxuaW1wb3J0IHtSdW5uZXIsIFJ1bm5lclJlc3VsdH0gZnJvbSAnLi9SdW5uZXInO1xyXG5pbXBvcnQge1RvdGFsQnlCcm93c2VyLCBUb3RhbENoYXJ0UGFuZWx9IGZyb20gJy4vVG90YWxDaGFydFBhbmVsJztcclxuaW1wb3J0IFByb21pc2UgPSBRLlByb21pc2U7XHJcblxyXG5leHBvcnQgY2xhc3MgUGFnZSB7XHJcbiAgICBwcm90ZWN0ZWQgdGVzdENhc2U6IFRlc3RDYXNlO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXN0Q2FzZTogVGVzdENhc2UpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnVGVzdENhc2UgY29uc3RydWN0b3IgLi4uJyk7XHJcbiAgICAgICAgdGhpcy50ZXN0Q2FzZSA9IHRlc3RDYXNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVuZGVyRWxlbShpZDogc3RyaW5nLCBodG1sOiBzdHJpbmcsIGRhdGE6IE9iamVjdCkge1xyXG4gICAgICAgIHZhciAkZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcclxuICAgICAgICB2YXIgdGVtcGxhdGUgPSBIYW5kbGViYXJzLmNvbXBpbGUoaHRtbCk7XHJcbiAgICAgICAgJGVsZW0uaW5uZXJIVE1MID0gdGVtcGxhdGUoZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbmRlcigpIHtcclxuICAgICAgICAvLyBSZW5kZXIgJ1NpZGViYXInLlxyXG4gICAgICAgIC8vIEFwcC5odHRwLmdldEhUTUwoQXBwLmNvbmZpZy5jbGllbnRVcmkgKyAnL3RwbC90ZXN0Y2FzZS1zaWRlYmFyLWZvcm0uaGJzJylcclxuICAgICAgICAgICAgLy8gLnRoZW4oKHI6IEh0dHBSZXNwb25zZUludGVyZmFjZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gUGFnZS5yZW5kZXJFbGVtKCd0ZXN0Y2FzZS1zaWRlYmFyLWZvcm0nLCA8c3RyaW5nPnIuZ2V0Qm9keSgpLCB0aGlzLnRlc3RDYXNlKTtcclxuICAgICAgICAgICAgLy8gfSlcclxuICAgICAgICAgICAgLy8gLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5iaW5kU2F2ZUJ0bigpO1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5iaW5kUnVuQnRuKCk7XHJcbiAgICAgICAgICAgIC8vIH0pO1xyXG5cclxuICAgICAgICAvLyBSZW5kZXIgJ0xpc3RpbmdzJy5cclxuICAgICAgICBRLnNwcmVhZChbXHJcbiAgICAgICAgICAgIEFwcC5odHRwLmdldEpTT04oQXBwLmNvbmZpZy5zZXJ2ZXJVcmkgKyAnL3Rlc3RzLmpzb24/ZXhjbHVkZT1yZXZpc2lvbl9udW1iZXIsZGVzY3JpcHRpb24saGFybmVzcyxlbnRyaWVzLHN0YXR1cyZvcmRlckJ5PWxhdGVzdCZsaW1pdD0yNScpLFxyXG4gICAgICAgICAgICBBcHAuaHR0cC5nZXRIVE1MKEFwcC5jb25maWcuY2xpZW50VXJpICsgJy90cGwvdGVzdGNhc2Utc2lkZWJhci1saXN0aW5nLmhicycpXHJcbiAgICAgICAgXSwgKGRhdGFSOiBIdHRwUmVzcG9uc2VJbnRlcmZhY2UsIHRwbFI6IEh0dHBSZXNwb25zZUludGVyZmFjZSkgPT4ge1xyXG4gICAgICAgICAgICBQYWdlLnJlbmRlckVsZW0oJ3NpZGViYXItbGlzdGluZycsIDxzdHJpbmc+dHBsUi5nZXRCb2R5KCksIDxPYmplY3Q+ZGF0YVIuZ2V0Qm9keSgpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gUmVuZGVyICdNYWluIGZvcm0nLlxyXG4gICAgICAgIFEuc3ByZWFkKFtcclxuICAgICAgICAgICAgQXBwLmh0dHAuZ2V0SFRNTChBcHAuY29uZmlnLmNsaWVudFVyaSArICcvdHBsL3Rlc3RjYXNlLWVudHJ5LWZvcm0uaGJzJyksXHJcbiAgICAgICAgICAgIEFwcC5odHRwLmdldEhUTUwoQXBwLmNvbmZpZy5jbGllbnRVcmkgKyAnL3RwbC90ZXN0Y2FzZS1tYWluLWZvcm0uaGJzJylcclxuICAgICAgICBdLCAodHBsRW50cnlSOiBIdHRwUmVzcG9uc2VJbnRlcmZhY2UsIHRwbE1haW5SOiBIdHRwUmVzcG9uc2VJbnRlcmZhY2UpID0+IHtcclxuICAgICAgICAgICAgSGFuZGxlYmFycy5yZWdpc3RlclBhcnRpYWwoJ2VudHJ5JywgdHBsRW50cnlSLmdldEJvZHkoKSk7XHJcbiAgICAgICAgICAgIFBhZ2UucmVuZGVyRWxlbSgndGVzdGNhc2UtbWFpbi1mb3JtJywgPHN0cmluZz50cGxNYWluUi5nZXRCb2R5KCksIHRoaXMudGVzdENhc2UpO1xyXG4gICAgICAgIH0pLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmJpbmRTYXZlQnRuKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYmluZEFkZFRlc3RFbnRyeUJ0bigpO1xyXG4gICAgICAgICAgICB0aGlzLmJpbmRSdW5CdG4oKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlbmRlckVycm9yUG9wdXAoZXJyb3I6IEVycm9yUmVzcG9uc2VEVE8gfCBzdHJpbmcpIHtcclxuICAgICAgICB2YXIgbXNnVHh0OiBzdHJpbmcgPSAnU29tZSBraW5kIG9mIGVycm9yIG9jY3VycmVkLic7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGVycm9yLmVycm9yICE9PSAndW5kZWZpbmVkJyAmJiBlcnJvci5lcnJvci5tZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIG1zZ1R4dCA9IGVycm9yLmVycm9yLm1lc3NhZ2U7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIG1zZ1R4dCA9IGVycm9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aW5kb3cuYWxlcnQobXNnVHh0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVuZGVyQ2hhcnRQYW5lbCgpIHtcclxuICAgICAgICB2YXIgcGFuZWwgPSBuZXcgVG90YWxDaGFydFBhbmVsKHRoaXMsIHRoaXMudGVzdENhc2UpO1xyXG4gICAgICAgIHBhbmVsLmdldERhdGEoKS50aGVuKChyOiBIdHRwUmVzcG9uc2VJbnRlcmZhY2UpID0+IHtcclxuICAgICAgICAgICAgcGFuZWwucmVuZGVyKDxUb3RhbEJ5QnJvd3NlcltdPnIuZ2V0Qm9keSgpKTtcclxuICAgICAgICB9LCBmdW5jdGlvbihyZXNwb25zZTogSHR0cFJlc3BvbnNlSW50ZXJmYWNlKSB7XHJcbiAgICAgICAgICAgIFBhZ2UucmVuZGVyRXJyb3JQb3B1cCg8RXJyb3JSZXNwb25zZURUTz5yZXNwb25zZS5nZXRCb2R5KCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBwcm90ZWN0ZWQgYmluZFNhdmVCdG4oKSB7XHJcbiAgICAgICAgdmFyICRzYXZlQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NhdmUtdGVzdGNhc2UtYnV0dG9uJyk7XHJcblxyXG4gICAgICAgICRzYXZlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgUGFnZS50b2dnbGVSZW5kZXJCdG4oJ3NhdmUtdGVzdGNhc2UtYnV0dG9uJywgJ2Rpc2FibGUnKTtcclxuXHJcbiAgICAgICAgICAgIHZhciB0ZXN0Q2FzZURUTyA9IFRlc3RDYXNlLmNyZWF0ZUVudGl0eUZyb21ET01FbGVtZW50KCd0ZXN0Y2FzZS1tYWluLWZvcm0nKTtcclxuICAgICAgICAgICAgLy8gQXBwZW5kIHRoZSBicm93c2VyIGRhdGEuXHJcbiAgICAgICAgICAgIHRlc3RDYXNlRFRPLmVudiA9IDxUZXN0Q2FzZUVudj57XHJcbiAgICAgICAgICAgICAgICBicm93c2VyTmFtZTogcGxhdGZvcm0ubmFtZSxcclxuICAgICAgICAgICAgICAgIGJyb3dzZXJWZXJzaW9uOiBwbGF0Zm9ybS52ZXJzaW9uLFxyXG4gICAgICAgICAgICAgICAgb3M6IHBsYXRmb3JtLm9zXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBBcHAuaHR0cC5wb3N0SlNPTihBcHAuY29uZmlnLnNlcnZlclVyaSArICcvdGVzdHMuanNvbicsIHRlc3RDYXNlRFRPKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgUGFnZS50b2dnbGVSZW5kZXJCdG4oJ3NhdmUtdGVzdGNhc2UtYnV0dG9uJywgJ2FjdGl2YXRlJyk7XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihyZXNwb25zZTogSHR0cFJlc3BvbnNlSW50ZXJmYWNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgUGFnZS50b2dnbGVSZW5kZXJCdG4oJ3NhdmUtdGVzdGNhc2UtYnV0dG9uJywgJ2FjdGl2YXRlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgUGFnZS5yZW5kZXJFcnJvclBvcHVwKDxFcnJvclJlc3BvbnNlRFRPPnJlc3BvbnNlLmdldEJvZHkoKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgYmluZFJ1bkJ0bigpIHtcclxuICAgICAgICB2YXIgX3BhZ2UgPSB0aGlzO1xyXG4gICAgICAgIHZhciAkcnVuQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3J1bi10ZXN0Y2FzZS1idXR0b24nKTtcclxuXHJcbiAgICAgICAgLy8gJ1J1biB0ZXN0cycgYnV0dG9uLlxyXG4gICAgICAgICRydW5CdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICBQYWdlLnRvZ2dsZVJlbmRlckJ0bigncnVuLXRlc3RjYXNlLWJ1dHRvbicsICdkaXNhYmxlJyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgdGVzdENhc2VEVE8gPSBUZXN0Q2FzZS5jcmVhdGVFbnRpdHlGcm9tRE9NRWxlbWVudCgndGVzdGNhc2UtbWFpbi1mb3JtJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBBcHBlbmQgdGhlIGJyb3dzZXIgZGF0YS5cclxuICAgICAgICAgICAgdGVzdENhc2VEVE8uZW52ID0gPFRlc3RDYXNlRW52PntcclxuICAgICAgICAgICAgICAgIGJyb3dzZXJOYW1lOiBwbGF0Zm9ybS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgYnJvd3NlclZlcnNpb246IHBsYXRmb3JtLnZlcnNpb24sXHJcbiAgICAgICAgICAgICAgICBvczogcGxhdGZvcm0ub3NcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vIFJlbmRlciAnUmVzdWx0cycgcGFuZWwgd2l0aCBwcmVsaW1pbmFyeSBkYXRhLlxyXG4gICAgICAgICAgICBBcHAuaHR0cC5nZXRIVE1MKGAke0FwcC5jb25maWcuY2xpZW50VXJpfS90cGwvdGVzdGNhc2UtcmVzdWx0cy10YWJsZS5oYnNgKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKHI6IEh0dHBSZXNwb25zZUludGVyZmFjZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIFBhZ2UucmVuZGVyRWxlbSgncmVzdWx0cycsIDxzdHJpbmc+ci5nZXRCb2R5KCksIHRlc3RDYXNlRFRPKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBKUyBjb2RlIGFuZCBydW4gaXQgaW4gYnJvd3Nlci5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgcnVubmVyID0gbmV3IFJ1bm5lcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRlc3RDYXNlKHRlc3RDYXNlRFRPKVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgcnVubmVyLnJ1bigpLnRoZW4oKHJlc3VsdHM6IFJ1bm5lclJlc3VsdFtdKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlLWFjdGl2YXRlICdSdW4nIGJ0bi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgUGFnZS50b2dnbGVSZW5kZXJCdG4oJ3J1bi10ZXN0Y2FzZS1idXR0b24nLCAnYWN0aXZhdGUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2VuZCB0aGUgdGVzdCByZXN1bHRzLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfcGFnZS5zZW5kUmVzdWx0cyhyZXN1bHRzKS50aGVuKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW5kZXIgJ0NoYXJ0IFBhbmVsJy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSZW5kZXJpbmcgQ2hhcnQgUGFuZWwgLi4uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcGFnZS5yZW5kZXJDaGFydFBhbmVsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBQYWdlLnJlbmRlckVycm9yUG9wdXAoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH0sIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgYmluZEFkZFRlc3RFbnRyeUJ0bigpIHtcclxuICAgICAgICAvLyAnQWRkIG5ldyB0ZXN0JyBidXR0b24uXHJcbiAgICAgICAgdmFyICRidG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWRkLXRlc3QtbGluaycpO1xyXG5cclxuICAgICAgICAkYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyBjb25zb2xlLmxvZygnY2xpY2s/Jyk7XHJcblxyXG4gICAgICAgICAgICBBcHAuaHR0cC5nZXRIVE1MKGAke0FwcC5jb25maWcuY2xpZW50VXJpfS90cGwvdGVzdGNhc2UtZW50cnktZm9ybS5oYnNgKS50aGVuKChyZXNwb25zZTogSHR0cFJlc3BvbnNlSW50ZXJmYWNlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBBZGQgdG8gbW9kZWwuXHJcbiAgICAgICAgICAgICAgICAvLyBAdG9kbyBUaGlzIHNob3VsZCBiZSB0aGUgTVZDcyBqb2IuXHJcbiAgICAgICAgICAgICAgICB2YXIgZW50cnlJZCA9IFBhZ2UuZ2V0TmV4dFRlc3RDYXNlRW50cnlJZCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5ld1Rlc3RFbnRyeSA9IFRlc3RDYXNlLmNyZWF0ZUVtcHR5VGVzdENhc2VFbnRyeShlbnRyeUlkKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudGVzdENhc2UuYWRkRW50cnkobmV3VGVzdEVudHJ5KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBSZW5kZXIgbmV3IHRlc3QgZW50cnkuXHJcbiAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSBIYW5kbGViYXJzLmNvbXBpbGUocmVzcG9uc2UuZ2V0Qm9keSgpKTtcclxuICAgICAgICAgICAgICAgIHZhciBodG1sID0gdGVtcGxhdGUobmV3VGVzdEVudHJ5KTtcclxuICAgICAgICAgICAgICAgIHZhciAkbmV3RW50cnkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgICRuZXdFbnRyeS5pbm5lckhUTUwgPSBodG1sO1xyXG4gICAgICAgICAgICAgICAgdmFyICRlbnRyaWVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VudHJpZXMnKTtcclxuICAgICAgICAgICAgICAgICRlbnRyaWVzLmFwcGVuZENoaWxkKCRuZXdFbnRyeS5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgICAgIC8vIEJpbmQgZXZlbnRzIHRvIGl0LlxyXG4gICAgICAgICAgICAgICAgdGhpcy5iaW5kUmVtb3ZlVGVzdEVudHJ5QnRuKGVudHJ5SWQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgcHJvdGVjdGVkIGJpbmRSZW1vdmVUZXN0RW50cnlCdG4oZW50cnlJZDogbnVtYmVyKSB7XHJcbiAgICAgICAgdmFyICRlbnRyaWVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VudHJpZXMnKTtcclxuICAgICAgICB2YXIgJGVudHJ5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rlc3RjYXNlLXRlc3QtJyArIGVudHJ5SWQpO1xyXG4gICAgICAgIHZhciAkYnV0dG9uID0gJGVudHJ5LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Rlc3RjYXNlLXRlc3QtcmVtb3ZlJyk7XHJcblxyXG4gICAgICAgICRidXR0b25bMF0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnY2xpY2s/Jyk7XHJcblxyXG4gICAgICAgICAgICAvLyBSZW1vdmUgZnJvbSBtb2RlbC5cclxuICAgICAgICAgICAgLy8gQHRvZG8gVGhpcyBzaG91bGQgYmUgdGhlIE1WQ3Mgam9iLlxyXG4gICAgICAgICAgICB0aGlzLnRlc3RDYXNlLnJlbW92ZUVudHJ5KGVudHJ5SWQpO1xyXG5cclxuICAgICAgICAgICAgLy8gUmVtb3ZlIGZyb20gRE9NLlxyXG4gICAgICAgICAgICAkZW50cmllcy5yZW1vdmVDaGlsZCgkZW50cnkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBwcm90ZWN0ZWQgc3RhdGljIGdldE5leHRUZXN0Q2FzZUVudHJ5SWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Rlc3RjYXNlLXRlc3QnKS5sZW5ndGggKyAxO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgdG9nZ2xlUmVuZGVyQnRuKGlkOiBzdHJpbmcsIHN0YXR1czogc3RyaW5nKSB7XHJcbiAgICAgICAgdmFyICRidG4gPSA8SFRNTEJ1dHRvbkVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xyXG5cclxuICAgICAgICBpZiAoc3RhdHVzID09PSAnYWN0aXZhdGUnKSB7XHJcbiAgICAgICAgICAgICRidG4uY2xhc3NMaXN0LnJlbW92ZSgnYnRuLWxvYWRpbmcnKTtcclxuICAgICAgICAgICAgJGJ0bi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICRidG4uY2xhc3NOYW1lICs9ICcgYnRuLWxvYWRpbmcnO1xyXG4gICAgICAgICAgICAkYnRuLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNlbmRSZXN1bHRzKHJlc3VsdHM6IFJ1bm5lclJlc3VsdFtdKTogUHJvbWlzZTxIdHRwUmVzcG9uc2VJbnRlcmZhY2U+IHtcclxuXHJcbiAgICAgICAgLy8gUmVmcmVzaCB0aGUgdGVzdENhc2Ugb2JqZWN0LlxyXG4gICAgICAgIC8vIEB0b2RvIE1vZGVsIGlzIG5vdCBrZWVwaW5nIHVwIHdpdGggRE9NIGNoYW5nZXMuIFJlZmFjdG9yLlxyXG4gICAgICAgIHZhciB0ZXN0Q2FzZURUTyA9IFRlc3RDYXNlLmNyZWF0ZUVudGl0eUZyb21ET01FbGVtZW50KCd0ZXN0Y2FzZS1tYWluLWZvcm0nKTtcclxuXHJcbiAgICAgICAgLy8gQXBwZW5kIHRoZSByZXN1bHRzLlxyXG4gICAgICAgIC8vIEtlZXAgdGhlIG9yaWdpbmFsIGZvcm0gb3JkZXIuXHJcbiAgICAgICAgLy8gVGhhdCdzIHdoeSByZXN1bHRzIGlzIGFuIG9iamVjdCBzdGFydGluZyBmcm9tIGtleSAxLlxyXG4gICAgICAgIGZvciAodmFyIGkgaW4gcmVzdWx0cykge1xyXG4gICAgICAgICAgICBpZiAoIXJlc3VsdHMuaGFzT3duUHJvcGVydHkoaSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRlc3RDYXNlRFRPLmVudHJpZXNbaV0ucmVzdWx0cyA9IHJlc3VsdHNbaV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBBcHBlbmQgdGhlIGJyb3dzZXIgZGF0YS5cclxuICAgICAgICB0ZXN0Q2FzZURUTy5lbnYgPSA8VGVzdENhc2VFbnY+e1xyXG4gICAgICAgICAgICBicm93c2VyTmFtZTogcGxhdGZvcm0ubmFtZSxcclxuICAgICAgICAgICAgYnJvd3NlclZlcnNpb246IHBsYXRmb3JtLnZlcnNpb24sXHJcbiAgICAgICAgICAgIG9zOiBwbGF0Zm9ybS5vc1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKHRlc3RDYXNlRFRPLCBKU09OLnN0cmluZ2lmeSh0ZXN0Q2FzZURUTykpO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgdGhlIG1vZGVsLlxyXG4gICAgICAgIHRoaXMudGVzdENhc2UgPSBUZXN0Q2FzZS5jcmVhdGUodGVzdENhc2VEVE8pO1xyXG5cclxuICAgICAgICByZXR1cm4gQXBwLmh0dHAucG9zdEpTT04oYCR7QXBwLmNvbmZpZy5zZXJ2ZXJVcml9L3Rlc3RzLmpzb25gLCB0ZXN0Q2FzZURUTyk7XHJcbiAgICB9O1xyXG5cclxufVxyXG5cclxuaW50ZXJmYWNlIEJ1dHRvbkV2ZW50VGFyZ2V0IGV4dGVuZHMgRXZlbnRUYXJnZXQge1xyXG4gICAgZGF0YXNldDoge1xyXG4gICAgICAgIGVudHJ5SWQ6IG51bWJlcjtcclxuICAgIH07XHJcbn1cclxuXHJcbmludGVyZmFjZSBFcnJvclJlc3BvbnNlRFRPIHtcclxuICAgIGVycm9yOiB7XHJcbiAgICAgICAgbWVzc2FnZTogc3RyaW5nLFxyXG4gICAgICAgIGRhdGE6IEFycmF5PHtcclxuICAgICAgICAgICAgcmVhc29uOiBzdHJpbmcsXHJcbiAgICAgICAgICAgIGNvZGU6IHN0cmluZ1xyXG4gICAgICAgIH0+LFxyXG4gICAgICAgIGNvZGU6IHN0cmluZ1xyXG4gICAgfTtcclxufVxyXG4iLCJpbXBvcnQgZGVmZXIgPSBRLmRlZmVyO1xyXG5leHBvcnQgY2xhc3MgUm91dGVyIHtcclxuICAgIHByb3RlY3RlZCByb3V0ZXM6IFJvdXRlW10gPSBbXTtcclxuXHJcbiAgICBwdWJsaWMgcnVuKGN1c3RvbVBhdGg/OiBzdHJpbmcpIHtcclxuICAgICAgICB2YXIgZGVmZXJyZWQgPSBRLmRlZmVyKCk7XHJcblxyXG4gICAgICAgIHZhciBwYXRoOiBzdHJpbmcgPSBjdXN0b21QYXRoID8gY3VzdG9tUGF0aCA6IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcclxuICAgICAgICB2YXIgcm91dGUgPSB0aGlzLm1hdGNoUm91dGUocGF0aCk7XHJcbiAgICAgICAgaWYgKHJvdXRlKSB7XHJcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocm91dGUuYWN0aW9uLmFwcGx5KG51bGwsIHJvdXRlLmFyZ3MpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QobmV3IEVycm9yKCdObyB2YWxpZCByb3V0ZSBmb3VuZC4nKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWRkUm91dGUocGF0aDogc3RyaW5nLCBhY3Rpb246IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgaWYgKCFwYXRoIHx8ICFhY3Rpb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5yb3V0ZXMucHVzaCh7XHJcbiAgICAgICAgICAgIHBhdGg6IHBhdGgsXHJcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAxLiBHRVQgL3Rlc3Qvc2RhZGFhZDEyL3RvdGFscy9ieVN0dWZmLmpzb25cclxuICAgICAqIDIuIFRyeSBtYXRjaCB3aXRoIC90ZXN0L3t0ZXN0fS90b3RhbHMve2ZpbHRlcn0uanNvblxyXG4gICAgICogMy5cclxuICAgICAqIHZhciBhYSA9IFwiL3Rlc3Qvc2RhZGFhZDEyL3RvdGFscy9ieVN0dWZmLmpzb25cIi5tYXRjaChuZXcgUmVnRXhwKFwiXFwvdGVzdFxcLyhbYS16MC05XSspXFwvdG90YWxzXFwvKFthLXowLTldKylcXC5qc29uXCIsICdpJykpOyBhYSA9IGFhLnNsaWNlKDEsIGFhLmxlbmd0aCk7XHJcbiAgICAqL1xyXG4gICAgcHJvdGVjdGVkIG1hdGNoUm91dGUocGF0aDogc3RyaW5nKTogUmVxdWVzdGVkUm91dGUge1xyXG4gICAgICAgIHZhciBtYXRjaEZvdW5kOiBBcnJheTxzdHJpbmc+O1xyXG4gICAgICAgIHZhciBwcmVwYXJlZFBhdGg6IHN0cmluZztcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucm91dGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHByZXBhcmVkUGF0aCA9IGBeJHtSb3V0ZXIucHJlcGFyZVBhdGgodGhpcy5yb3V0ZXNbaV0ucGF0aCl9JGA7XHJcbiAgICAgICAgICAgIG1hdGNoRm91bmQgPSBwYXRoLm1hdGNoKG5ldyBSZWdFeHAocHJlcGFyZWRQYXRoLCAnaScpKTtcclxuICAgICAgICAgICAgaWYgKG1hdGNoRm91bmQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gbWF0Y2hGb3VuZC5zbGljZSgxLCBtYXRjaEZvdW5kLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gPFJlcXVlc3RlZFJvdXRlPntcclxuICAgICAgICAgICAgICAgICAgICBwYXRoOiB0aGlzLnJvdXRlc1tpXS5wYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogdGhpcy5yb3V0ZXNbaV0uYWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdGVkUGF0aDogcGF0aFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgc3RhdGljIHByZXBhcmVQYXRoKHBhdGg6IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiBwYXRoLnJlcGxhY2UoL3tbYS16XSt9L2csICcoW2EtejAtOS1dKyknKTtcclxuICAgIH1cclxufVxyXG5cclxuaW50ZXJmYWNlIFJvdXRlIHtcclxuICAgIHBhdGg6IHN0cmluZztcclxuICAgIGFjdGlvbjogRnVuY3Rpb247XHJcbn1cclxuXHJcbmludGVyZmFjZSBSZXF1ZXN0ZWRSb3V0ZSBleHRlbmRzIFJvdXRlIHtcclxuICAgIHJlcXVlc3RlZFBhdGg6IHN0cmluZztcclxuICAgIGFyZ3M6IEFycmF5PHN0cmluZz47XHJcbn1cclxuIiwiaW1wb3J0IHtUZXN0Q2FzZX0gZnJvbSAnLi9UZXN0Q2FzZSc7XHJcbmltcG9ydCBQcm9taXNlID0gUS5Qcm9taXNlO1xyXG5cclxuZXhwb3J0IGNsYXNzIFJ1bm5lciB7XHJcbiAgICBwcm90ZWN0ZWQgdGVzdENhc2U6IFRlc3RDYXNlO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXN0Q2FzZTogVGVzdENhc2UpIHtcclxuICAgICAgICB0aGlzLnRlc3RDYXNlID0gdGVzdENhc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJ1bigpOiBQcm9taXNlPHtba2V5OiBudW1iZXJdOiBSdW5uZXJSZXN1bHR9PiB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnRlc3RDYXNlLmlzUmVhZHlUb1J1bigpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG5lZWQgdG8gaGF2ZSBhdCBsZWFzdCB0d28gY29kZSBlbnRyaWVzIGluIG9yZGVyIHRvIHJ1biB0aGUgdGVzdCBjYXNlLicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coJ1N0YXJ0aW5nIHJ1bm5lciAuLi4nKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGFydEJlbmNoKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIHN0YXJ0QmVuY2goKTogUHJvbWlzZTx7W2tleTogbnVtYmVyXTogUnVubmVyUmVzdWx0fT4ge1xyXG4gICAgICAgIHZhciBkZWZlcnJlZFEgPSBRLmRlZmVyPHtba2V5OiBudW1iZXJdOiBSdW5uZXJSZXN1bHR9PigpO1xyXG5cclxuICAgICAgICB2YXIgdGVzdENhc2UgPSB0aGlzLnRlc3RDYXNlO1xyXG4gICAgICAgIHZhciBiZW5jaGVzOiBCZW5jaG1hcmtbXSA9IFtdO1xyXG4gICAgICAgIHZhciBiZW5jaDogQmVuY2htYXJrO1xyXG4gICAgICAgIHZhciByZXN1bHRzOiB7W2tleTogbnVtYmVyXTogUnVubmVyUmVzdWx0fSA9IHt9O1xyXG5cclxuICAgICAgICBmb3IgKHZhciBqIGluIHRlc3RDYXNlLmVudHJpZXMpIHtcclxuICAgICAgICAgICAgaWYgKCF0ZXN0Q2FzZS5lbnRyaWVzLmhhc093blByb3BlcnR5KGopKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYmVuY2ggPSBuZXcgQmVuY2htYXJrKHRlc3RDYXNlLmVudHJpZXNbal0udGl0bGUsIHtcclxuICAgICAgICAgICAgICAgIGlkOiBqLFxyXG4gICAgICAgICAgICAgICAgYXN5bmM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBzZXR1cDogdGVzdENhc2UuaGFybmVzcy5zZXRVcCxcclxuICAgICAgICAgICAgICAgIHRlYXJkb3duOiB0ZXN0Q2FzZS5oYXJuZXNzLnRlYXJEb3duLFxyXG4gICAgICAgICAgICAgICAgZm46IHRlc3RDYXNlLmVudHJpZXNbal0uY29kZSxcclxuICAgICAgICAgICAgICAgIG9uU3RhcnQ6IGZ1bmN0aW9uKGU6IEJlbmNobWFyay5FdmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBiZW5jaFJlc3VsdDogQmVuY2htYXJrID0gPEJlbmNobWFyaz5lLnRhcmdldDtcclxuICAgICAgICAgICAgICAgICAgICBSdW5uZXIucmVuZGVyUmVzdWx0KGJlbmNoUmVzdWx0LmlkLCAnU3RhcnRpbmcgLi4uJyk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZTogZnVuY3Rpb24oZTogQmVuY2htYXJrLkV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGJlbmNoUmVzdWx0OiBCZW5jaG1hcmsgPSA8QmVuY2htYXJrPmUudGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHNbYmVuY2hSZXN1bHQuaWRdID0gPFJ1bm5lclJlc3VsdD57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBiZW5jaFJlc3VsdC5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGJlbmNoUmVzdWx0LmVycm9yID8gQmVuY2htYXJrLmpvaW4oYmVuY2hSZXN1bHQuZXJyb3IpIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BzUGVyU2VjOiBiZW5jaFJlc3VsdC5oei50b0ZpeGVkKGJlbmNoUmVzdWx0Lmh6IDwgMTAwID8gMiA6IDApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHNQZXJTZWNGb3JtYXR0ZWQ6IEJlbmNobWFyay5mb3JtYXROdW1iZXIoYmVuY2hSZXN1bHQuaHoudG9GaXhlZChiZW5jaFJlc3VsdC5oeiA8IDEwMCA/IDIgOiAwKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBtOiBiZW5jaFJlc3VsdC5zdGF0cy5ybWUudG9GaXhlZCgyKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcnVuU2FtcGxlczogYmVuY2hSZXN1bHQuc3RhdHMuc2FtcGxlLmxlbmd0aFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgUnVubmVyLnJlbmRlclJlc3VsdChiZW5jaFJlc3VsdC5pZCwgcmVzdWx0c1tiZW5jaFJlc3VsdC5pZF0ub3BzUGVyU2VjRm9ybWF0dGVkICsgJyAoJnBsdXNtbjsnICsgcmVzdWx0c1tiZW5jaFJlc3VsdC5pZF0ucG0gKyAnKScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8gS2VlcCB0aGUgb3JpZ2luYWwgb3JkZXIsIGV2ZW4gaWYgdGhlIGNvZGUgY29udGVudCBvciB0aXRsZSBjaGFuZ2VzLlxyXG4gICAgICAgICAgICBiZW5jaGVzLnB1c2goYmVuY2gpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIEJlbmNobWFyay5pbnZva2UoYmVuY2hlcywge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ3J1bicsXHJcbiAgICAgICAgICAgICAgICBhcmdzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgLy8gJ3F1ZXVlZCc6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBvblN0YXJ0OiAoZTogQmVuY2htYXJrLkV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1N0YXJ0aW5nIGJlbmNobWFya3MgLi4uJywgZSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgb25DeWNsZTogKGU6IEJlbmNobWFyay5FdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdvbkN5Y2xlIGhlcmUuJywgZSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgb25FcnJvcjogKGU6IEJlbmNobWFyay5FdmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdvbkVycm9yIGhlcmUuJywgZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWRRLnJlamVjdChuZXcgRXJyb3IoJ1J1bm5pbmcgc3VpdGUgcmV0dXJuZWQgYW4gZXJyb3IuJykpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIG9uQ29tcGxldGU6IChlOiBCZW5jaG1hcmsuRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnb25Db21wbGV0ZSBoZXJlLicsIGUsIHJlc3VsdHMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBSdW5uZXIucmVuZGVyV2lubmVyUmVzdWx0KEJlbmNobWFyay5maWx0ZXIoYmVuY2hlcywgJ2Zhc3Rlc3QnKVswXS5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgUnVubmVyLnJlbmRlckxvc2VyUmVzdWx0KEJlbmNobWFyay5maWx0ZXIoYmVuY2hlcywgJ3Nsb3dlc3QnKVswXS5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWRRLnJlc29sdmUocmVzdWx0cyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sIDIwMDApO1xyXG5cclxuICAgICAgICByZXR1cm4gZGVmZXJyZWRRLnByb21pc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIHN0YXRpYyByZW5kZXJSZXN1bHQoaWQ6IHN0cmluZyB8IG51bWJlciwgdGV4dDogc3RyaW5nKSB7XHJcbiAgICAgICAgdmFyICRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rlc3RjYXNlLXRlc3QtcmVzdWx0LXRleHQtJyArIGlkKTtcclxuICAgICAgICAkZWxlbS5pbm5lckhUTUwgPSB0ZXh0O1xyXG4gICAgfTtcclxuXHJcbiAgICBwcm90ZWN0ZWQgc3RhdGljIHJlbmRlcldpbm5lclJlc3VsdChpZDogc3RyaW5nIHwgbnVtYmVyKSB7XHJcbiAgICAgICAgdmFyICRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rlc3RjYXNlLXRlc3QtcmVzdWx0LXRleHQtJyArIGlkKTtcclxuICAgICAgICAkZWxlbS5jbGFzc05hbWUgKz0gJyBzdWNjZXNzJztcclxuICAgIH07XHJcblxyXG4gICAgcHJvdGVjdGVkIHN0YXRpYyByZW5kZXJMb3NlclJlc3VsdChpZDogc3RyaW5nIHwgbnVtYmVyKSB7XHJcbiAgICAgICAgdmFyICRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rlc3RjYXNlLXRlc3QtcmVzdWx0LXRleHQtJyArIGlkKTtcclxuICAgICAgICAkZWxlbS5jbGFzc05hbWUgKz0gJyBkYW5nZXInO1xyXG4gICAgfTtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUnVubmVyUmVzdWx0IHtcclxuICAgIGlkOiBudW1iZXI7XHJcbiAgICBlcnJvcjogc3RyaW5nO1xyXG4gICAgb3BzUGVyU2VjOiBzdHJpbmc7XHJcbiAgICBvcHNQZXJTZWNGb3JtYXR0ZWQ6IHN0cmluZztcclxuICAgIHBtOiBzdHJpbmc7XHJcbiAgICBydW5TYW1wbGVzOiBudW1iZXI7XHJcbn1cclxuIiwiaW1wb3J0IHtVdGlsfSBmcm9tICcuL1V0aWxzJztcclxuaW1wb3J0IHtSdW5uZXJSZXN1bHR9IGZyb20gJy4vUnVubmVyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBUZXN0Q2FzZSB7XHJcbiAgICBwcm90ZWN0ZWQgX3RpdGxlOiBzdHJpbmc7XHJcbiAgICBwcm90ZWN0ZWQgX3NsdWc6IHN0cmluZztcclxuICAgIHByb3RlY3RlZCBfZGVzY3JpcHRpb246IHN0cmluZztcclxuICAgIHByb3RlY3RlZCBfc3RhdHVzOiBzdHJpbmc7XHJcbiAgICBwcm90ZWN0ZWQgX2hhcm5lc3M6IFRlc3RDYXNlSGFybmVzcztcclxuICAgIHByb3RlY3RlZCBfZW50cmllczogVGVzdENhc2VFbnRyeVtdO1xyXG4gICAgcHJvdGVjdGVkIF9lbnY6IFRlc3RDYXNlRW52O1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih0ZXN0Q2FzZTogVGVzdENhc2VFbnRpdHkpIHtcclxuICAgICAgICB0aGlzLnRpdGxlID0gdGVzdENhc2UudGl0bGU7XHJcbiAgICAgICAgdGhpcy5zbHVnID0gdGVzdENhc2Uuc2x1ZztcclxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gdGVzdENhc2UuZGVzY3JpcHRpb247XHJcbiAgICAgICAgdGhpcy5zdGF0dXMgPSB0ZXN0Q2FzZS5zdGF0dXM7XHJcbiAgICAgICAgdGhpcy5oYXJuZXNzID0gdGVzdENhc2UuaGFybmVzcztcclxuICAgICAgICB0aGlzLmVudHJpZXMgPSB0ZXN0Q2FzZS5lbnRyaWVzO1xyXG4gICAgICAgIHRoaXMuZW52ID0gdGVzdENhc2UuZW52O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgdGl0bGUodGl0bGU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX3RpdGxlID0gdGl0bGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCB0aXRsZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90aXRsZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHNsdWcoc2x1Zzogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fc2x1ZyA9IHNsdWc7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBzbHVnKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NsdWc7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBkZXNjcmlwdGlvbihkZXNjcmlwdGlvbjogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGRlc2NyaXB0aW9uKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rlc2NyaXB0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgc3RhdHVzKHN0YXR1czogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fc3RhdHVzID0gc3RhdHVzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgc3RhdHVzKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXR1cztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGhhcm5lc3MoaGFybmVzczogVGVzdENhc2VIYXJuZXNzKSB7XHJcbiAgICAgICAgdGhpcy5faGFybmVzcyA9IGhhcm5lc3M7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBoYXJuZXNzKCk6IFRlc3RDYXNlSGFybmVzcyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhcm5lc3M7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBlbnRyaWVzKGVudHJpZXM6IFRlc3RDYXNlRW50cnlbXSkge1xyXG4gICAgICAgIHRoaXMuX2VudHJpZXMgPSBlbnRyaWVzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgZW50cmllcygpOiBUZXN0Q2FzZUVudHJ5W10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbnRyaWVzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGRFbnRyeShlbnRyeTogVGVzdENhc2VFbnRyeSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2VudHJpZXNbZW50cnkuaWRdID0gZW50cnk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbW92ZUVudHJ5KGlkOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBkZWxldGUgdGhpcy5fZW50cmllc1tpZF07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCBlbnYoZW52OiBUZXN0Q2FzZUVudikge1xyXG4gICAgICAgIHRoaXMuX2VudiA9IGVudjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGVudigpOiBUZXN0Q2FzZUVudiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VudjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNSZWFkeVRvUnVuKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAoVXRpbC5nZXRPYmpMZW5ndGgodGhpcy5lbnRyaWVzKSA+PSAyKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSh0ZXN0Q2FzZUVudGl0eTogVGVzdENhc2VFbnRpdHkpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFRlc3RDYXNlKHRlc3RDYXNlRW50aXR5KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUVtcHR5RW50aXR5KCk6IFRlc3RDYXNlRW50aXR5IHtcclxuICAgICAgICByZXR1cm4gPFRlc3RDYXNlRW50aXR5PntcclxuICAgICAgICAgICAgdGl0bGU6ICcnLFxyXG4gICAgICAgICAgICBzbHVnOiBVdGlsLnJhbmRvbVN0cmluZygxMCksXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnJyxcclxuICAgICAgICAgICAgc3RhdHVzOiAncHVibGljJyxcclxuICAgICAgICAgICAgaGFybmVzczogPFRlc3RDYXNlSGFybmVzcz57XHJcbiAgICAgICAgICAgICAgICBodG1sOiAnJyxcclxuICAgICAgICAgICAgICAgIHNldFVwOiAnJyxcclxuICAgICAgICAgICAgICAgIHRlYXJEb3duOiAnJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnRyaWVzOiBbXHJcbiAgICAgICAgICAgICAgICA8VGVzdENhc2VFbnRyeT57aWQ6IDEsIHRpdGxlOiAnJywgY29kZTogJyd9LFxyXG4gICAgICAgICAgICAgICAgPFRlc3RDYXNlRW50cnk+e2lkOiAyLCB0aXRsZTogJycsIGNvZGU6ICcnfVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUVudGl0eUZyb21ET01FbGVtZW50KGlkOiBzdHJpbmcpOiBUZXN0Q2FzZUVudGl0eSB7XHJcbiAgICAgICAgdmFyICRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSAgPHt0ZXN0Q2FzZTogVGVzdENhc2VFbnRpdHl9PmZvcm1Ub09iamVjdCgkZWxlbSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdC50ZXN0Q2FzZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUVtcHR5VGVzdENhc2VFbnRyeShpZDogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIDxUZXN0Q2FzZUVudHJ5PntcclxuICAgICAgICAgICAgaWQ6IGlkLFxyXG4gICAgICAgICAgICB0aXRsZTogJycsXHJcbiAgICAgICAgICAgIGNvZGU6ICcnXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUZXN0Q2FzZUVudGl0eSB7XHJcbiAgICB0aXRsZTogc3RyaW5nO1xyXG4gICAgc2x1Zzogc3RyaW5nO1xyXG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcclxuICAgIHN0YXR1czogc3RyaW5nO1xyXG4gICAgaGFybmVzczogVGVzdENhc2VIYXJuZXNzO1xyXG4gICAgZW50cmllczogVGVzdENhc2VFbnRyeVtdO1xyXG4gICAgZW52OiBUZXN0Q2FzZUVudjtcclxufVxyXG5cclxuaW50ZXJmYWNlIFRlc3RDYXNlSGFybmVzcyB7XHJcbiAgICBodG1sOiBzdHJpbmc7XHJcbiAgICBzZXRVcDogc3RyaW5nO1xyXG4gICAgdGVhckRvd246IHN0cmluZztcclxufVxyXG5cclxuaW50ZXJmYWNlIFRlc3RDYXNlRW50cnkge1xyXG4gICAgaWQ6IG51bWJlcjtcclxuICAgIHRpdGxlOiBzdHJpbmc7XHJcbiAgICBjb2RlOiBzdHJpbmc7XHJcbiAgICByZXN1bHRzPzogUnVubmVyUmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRlc3RDYXNlRW52IHtcclxuICAgIGJyb3dzZXJOYW1lOiBzdHJpbmc7XHJcbiAgICBicm93c2VyVmVyc2lvbjogc3RyaW5nO1xyXG4gICAgb3M6IHN0cmluZztcclxufVxyXG4iLCJpbXBvcnQge1Rlc3RDYXNlfSBmcm9tICcuL1Rlc3RDYXNlJztcclxuaW1wb3J0IHtQYWdlfSBmcm9tICcuL1BhZ2UnO1xyXG5pbXBvcnQge1BhbmVsfSBmcm9tICcuL1BhbmVsJztcclxuaW1wb3J0IHtIdHRwUmVzcG9uc2VJbnRlcmZhY2V9IGZyb20gJy4vSHR0cCc7XHJcbmltcG9ydCB7QXBwfSBmcm9tICcuL0FwcCc7XHJcbmltcG9ydCBQcm9taXNlID0gUS5Qcm9taXNlO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRvdGFsQ2hhcnRQYW5lbCBpbXBsZW1lbnRzIFBhbmVsIHtcclxuICAgIHByb3RlY3RlZCBwYWdlOiBQYWdlO1xyXG4gICAgcHJvdGVjdGVkIHRlc3RDYXNlOiBUZXN0Q2FzZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwYWdlOiBQYWdlLCB0ZXN0Q2FzZTogVGVzdENhc2UpIHtcclxuICAgICAgICB0aGlzLnBhZ2UgPSBwYWdlO1xyXG4gICAgICAgIHRoaXMudGVzdENhc2UgPSB0ZXN0Q2FzZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RGF0YSgpOiBQcm9taXNlPEh0dHBSZXNwb25zZUludGVyZmFjZT4ge1xyXG4gICAgICAgIHJldHVybiBBcHAuaHR0cC5nZXRKU09OKGAke0FwcC5jb25maWcuc2VydmVyVXJpfS90ZXN0LyR7dGhpcy50ZXN0Q2FzZS5zbHVnfS90b3RhbHMvYnktYnJvd3Nlci5qc29uYCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQHRvZG8gU2ltcGxpZnkgdGhpcyBieSBhZGRpbmcgYSAzcmRwYXJ0eSBjaGFydCBsaWJyYXJ5LlxyXG4gICAgcHVibGljIHJlbmRlcihkYXRhOiBUb3RhbEJ5QnJvd3NlcltdKSB7XHJcbiAgICAgICAgdmFyICRjaGFydERpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGFydC1yZXN1bHRzJyk7XHJcbiAgICAgICAgaWYgKCRjaGFydERpdi5jbGFzc05hbWUgPT09ICdyZW5kZXJlZCcpIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyKGRhdGEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGdvb2dsZS5jaGFydHMubG9hZCgnY3VycmVudCcsIHtwYWNrYWdlczogWydjb3JlY2hhcnQnLCAnYmFyJ119KTtcclxuICAgICAgICAgICAgZ29vZ2xlLmNoYXJ0cy5zZXRPbkxvYWRDYWxsYmFjaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXIoZGF0YSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX3JlbmRlcihkYXRhOiBUb3RhbEJ5QnJvd3NlcltdKSB7XHJcbiAgICAgICAgdmFyICRjaGFydERpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGFydC1yZXN1bHRzJyk7XHJcbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IGdvb2dsZS52aXN1YWxpemF0aW9uLkJhckNoYXJ0KCRjaGFydERpdik7XHJcblxyXG4gICAgICAgIHZhciBicm93c2VyczogYW55W10gPSBbXTtcclxuICAgICAgICB2YXIgcmVzdWx0c1NldDogYW55W10gPSBbXTtcclxuXHJcbiAgICAgICAgZGF0YS5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XHJcbiAgICAgICAgICAgIHZhciBlbnRyeVJlc3VsdHM6IGFueSA9IHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiBlbnRyeS50aXRsZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBlbnRyeS50b3RhbHMuZm9yRWFjaChmdW5jdGlvbih0b3RhbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGJyb3dzZXJJZGVudGlmaWVyID0gdG90YWwuYnJvd3Nlck5hbWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoYnJvd3NlcnMuaW5kZXhPZihicm93c2VySWRlbnRpZmllcikgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJvd3NlcnMucHVzaChicm93c2VySWRlbnRpZmllcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbnRyeVJlc3VsdHNbYnJvd3NlcklkZW50aWZpZXJdID0gcGFyc2VJbnQodG90YWwubWV0cmljVmFsdWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmVzdWx0c1NldC5wdXNoKF8ubWFwKGVudHJ5UmVzdWx0cykpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBicm93c2Vycy51bnNoaWZ0KCdUb3RhbCcpO1xyXG4gICAgICAgIHJlc3VsdHNTZXQudW5zaGlmdChicm93c2Vycyk7XHJcblxyXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBsZWdlbmQ6IHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYm90dG9tJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBiYXJzOiAnaG9yaXpvbnRhbCcsXHJcbiAgICAgICAgICAgIGNoYXJ0QXJlYToge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogJzgwJSdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNoYXJ0LmRyYXcoXHJcbiAgICAgICAgICAgIGdvb2dsZS52aXN1YWxpemF0aW9uLmFycmF5VG9EYXRhVGFibGUocmVzdWx0c1NldCksXHJcbiAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAgICApO1xyXG4gICAgICAgICRjaGFydERpdi5jbGFzc05hbWUgPSAncmVuZGVyZWQnO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRvdGFsQnlCcm93c2VyIHtcclxuICAgIHRpdGxlOiBzdHJpbmc7XHJcbiAgICB0b3RhbHM6IFRvdGFsQnlCcm93c2VyTWV0cmljW107XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVG90YWxCeUJyb3dzZXJNZXRyaWMge1xyXG4gICAgYnJvd3Nlck5hbWU6IHN0cmluZztcclxuICAgIG1ldHJpY1R5cGU6IHN0cmluZztcclxuICAgIG1ldHJpY1ZhbHVlOiBzdHJpbmc7XHJcbiAgICBydW5Db3VudDogc3RyaW5nO1xyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBVdGlsIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgcmFuZG9tU3RyaW5nKGxlbjogbnVtYmVyLCBjaGFyU2V0Pzogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBjaGFyU2V0ID0gY2hhclNldCB8fCAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODknO1xyXG4gICAgICAgIHZhciByYW5kb21TdHJpbmcgPSAnJztcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciByYW5kb21Qb3ogPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjaGFyU2V0Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgIHJhbmRvbVN0cmluZyArPSBjaGFyU2V0LnN1YnN0cmluZyhyYW5kb21Qb3osIHJhbmRvbVBveiArIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmFuZG9tU3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSByZWFsIG51bWJlciBvZiBwcm9wZXJ0aWVzIGZyb20gYW4gb2JqZWN0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvXHJcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldE9iakxlbmd0aChvOiBPYmplY3QpOiBudW1iZXIge1xyXG4gICAgICAgIGlmICh0eXBlb2YgbyAhPT0gJ29iamVjdCcgfHwgbyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBsOiBudW1iZXIgPSAwO1xyXG4gICAgICAgIHZhciBrOiBhbnk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgT2JqZWN0LmtleXMgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgbCA9IE9iamVjdC5rZXlzKG8pLmxlbmd0aDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGsgaW4gbykge1xyXG4gICAgICAgICAgICAgICAgaWYgKG8uaGFzT3duUHJvcGVydHkoaykpIHtcclxuICAgICAgICAgICAgICAgICAgICBsKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZXNjYXBlRm9yUmVnZXgoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXV0vZywgJ1xcXFwkJicpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7QXBwfSBmcm9tICcuL0FwcCc7XHJcblxyXG5sZXQgc2VydmVyVXJpID0gd2luZG93LmxvY2F0aW9uLmhvc3QgPT09ICdqc2JlbmNoLm9yZycgPyAnaHR0cDovL2FwaS5qc2JlbmNoLm9yZy92MicgOiAnaHR0cDovL2FwaS1kZXYuanNiZW5jaC5vcmcvdjInO1xyXG5sZXQgY2xpZW50VXJpID0gJ2h0dHA6Ly8nICsgd2luZG93LmxvY2F0aW9uLmhvc3Q7XHJcblxyXG5uZXcgQXBwKHtcclxuICAgIHNlcnZlclVyaTogc2VydmVyVXJpLFxyXG4gICAgY2xpZW50VXJpOiAgY2xpZW50VXJpXHJcbn0pO1xyXG4iXX0=
